#!/usr/bin/env python3

"""
Class to read q-g data set, do jet finding, and compute subjet basis
"""

import os
import sys
import argparse
import yaml
import h5py
import time
from collections import defaultdict
import math
import csv
import statistics

# Data analysis and plotting
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import seaborn as sns
import uproot

# Fastjet via python (from external library heppy)
import fastjet as fj
import fjcontrib
import fjext

# Energy flow package
import energyflow

# Base class
sys.path.append('.')
from base import common_base

################################################################
class ProcessQG(common_base.CommonBase):

    #---------------------------------------------------------------
    # Constructor
    #---------------------------------------------------------------
    def __init__(self, config_file='', output_dir='', **kwargs):
        super(common_base.CommonBase, self).__init__(**kwargs)
       
        self.start_time = time.time()
        
        self.config_file = config_file
        self.output_dir = output_dir
        if not os.path.exists(self.output_dir):
            os.makedirs(self.output_dir)
        
        # Initialize config file
        self.initialize_config()

        # Initialize data structures to store results
        self.initialize_data_structures()

        # Load dataset (quark-gluon or Z/QCD)
        self.load_dataset()
     
        #print(self)
        print()

    #---------------------------------------------------------------
    # Initialize config file into class members
    #---------------------------------------------------------------
    def initialize_config(self):
    
        # Read config file
        with open(self.config_file, 'r') as stream:
          config = yaml.safe_load(stream)
        
        #Which Classification task
        self.dataset_type = config['dataset_type']
        
        self.R = config['R']
        self.pt = config['pt']
        self.y_max = config['y_max']
        self.n_total = config['n_total']
        self.n_val = config['n_val']
        self.n_test = config['n_test']
        self.event_index = 0
        
        # If QCD vs. Zjet case, load the files generated by Mateusz
        if self.dataset_type == 'Zjet':
            # Jet mass cut
            self.mj_min = config['mj_min']
            self.mj_max = config['mj_max']

        # Nsubjettiness basis
        self.K = config['K_max']
        self.N_list = []
        self.beta_list = []

        for i in range(self.K-2):
            self.N_list += [i+1] * 3
            self.beta_list += [0.5,1,2]
            print()
        self.N_list += [self.K-1] * 2  
        self.beta_list += [1,2]

        print()
        print(f'N list: {self.N_list}')
        print(f'beta list: {self.beta_list}')
        print()
        

        # Subjet basis
        self.subjet_basis = config['subjet_basis']
        self.njet_list = config['njet']
        self.N_max_list= config['N_max']
        self.r_list = config['r']

        if type(self.njet_list) != list:
            print(f'ERROR: njet must be a list')
            print(f'Changing njet into a list')
            self.njet_list = list([self.njet_list])
        if type(self.N_max_list) != list:
            print(f'ERROR: N_max must be a list')
            print(f'Changing N_max into a list')
            self.N_max_list = list([self.N_max_list])


        # Clustering Algorithm 
        self.Clustering_Alg = config['Clustering_Alg']


        if self.subjet_basis == 'exclusive':
            if self.r_list != [self.R]:
                    print(f'ERROR: Wrong subjet radius r. For exlusive basis we need r = {self.R}')
                    print(f'Changing radius to r = {self.R}')
                    self.r_list = [self.R]
                    time.sleep(2)
            if self.Clustering_Alg == 'antikt_algorithm':
                sys.exit(f'ERROR: For the exclusive algorithm we can not use antikt_algorithm (fastjet throws a warning)')
                


        # Laman Construction
        self.laman_load = config['laman']
        self.Laman_construction = config['Laman_construction']


        # Load Herwig Dataset:
        self.Herwig_dataset = config['Herwig_dataset']    


    #---------------------------------------------------------------        
    # Initialize empty data structures to store results
    #---------------------------------------------------------------
    def initialize_data_structures(self):

        # Create two-layer nested defaultdict of lists to store jet observables
        self.output = defaultdict(lambda: defaultdict(list))

    #---------------------------------------------------------------
    # Load qg data set 
    #---------------------------------------------------------------
    def load_dataset(self):
        
        # qvsg Classification problem
        
        if self.dataset_type == 'qg':
            
            if self.pt[0] == 500 and self.pt[1] == 650:
                # https://energyflow.network/docs/datasets/#quark-and-gluon-jets
                # X : a three-dimensional numpy array of jets:
                #     list of jets with list of particles for each jet, with (pt,y,phi,pid) values for each particle
                # y : a numpy array of quark/gluon jet labels (quark=1 and gluon=0).
                # The jets are padded with zero-particles in order to make a contiguous array.
                print()
                print('Loading qg dataset:')
                X, self.y = energyflow.datasets.qg_jets.load(num_data=self.n_total, pad=True, 
                                                            generator='pythia',  # Herwig is also available
                                                            with_bc=False        # Turn on to enable heavy quarks
                                                            )
                print('(n_jets, n_particles per jet, n_variables): {}'.format(X.shape))
                print()

                # Next, we will transform these into fastjet::PseudoJet objects.
                # This allows us to use the fastjet contrib to compute our custom basis (Nsubjettiness, subjets, etc).

                # Translate 3D numpy array (100,000 x 556 particles x 4 vars) into a dataframe
                # Define a unique index for each jet
                columns = ['pt', 'y', 'phi', 'pid']
                df_particles = pd.DataFrame(X.reshape(-1, 4), columns=columns)
                df_particles.index = np.repeat(np.arange(X.shape[0]), X.shape[1]) + 1
                df_particles.index.name = 'jet_id'
                
                # (i) Group the particle dataframe by jet id
                #     df_particles_grouped is a DataFrameGroupBy object with one particle dataframe per jet
                df_fjparticles_grouped = df_particles.groupby('jet_id')
                

                # (ii) Transform the DataFrameGroupBy object to a SeriesGroupBy of fastjet::PseudoJets
                # NOTE: for now we neglect the mass -- and assume y=eta
                # TO DO: Add y to https://github.com/matplo/heppy/blob/master/cpptools/src/fjext/fjtools.cxx
                # TO DO: Add mass vector using pdg
                print('Converting particle dataframe to fastjet::PseudoJets...')
                self.df_fjparticles = df_fjparticles_grouped.apply(self.get_fjparticles)
                print('Done.')
                print()

                # Mass cut
                self.mj_min=0
                self.mj_max=180
                

                jet_mass_cut_list = []
                for iterator,jet in enumerate(self.df_fjparticles):
                    jet_def = fj.JetDefinition(fj.antikt_algorithm, fj.JetDefinition.max_allowable_R)
                    cs = fj.ClusterSequence(jet, jet_def)
                    jet_selected = fj.sorted_by_pt(cs.inclusive_jets())[0]
                    jet_mass = jet_selected.m()
                    if jet_mass >= self.mj_min  and jet_mass <= self.mj_max:
                        jet_mass_cut_list.append(iterator)


                print(f'For the q vs g, {math.trunc(100*(1-len(jet_mass_cut_list)/len(self.df_fjparticles)))}% jets are outside the mass range ({self.mj_min}-{self.mj_max} GeV)') 
                time.sleep(2)

                # Load the Herwig Dataset for testing (For now only pfn and sub_pfn are supported)
                if self.Herwig_dataset == 'True':

                    X_herwig, self.y_herwig = energyflow.datasets.qg_jets.load(num_data=self.n_val + self.n_test, pad=True, 
                                                            generator='herwig',  # Herwig is also available
                                                            with_bc=False        # Turn on to enable heavy quarks
                                                            )
                
                    columns = ['pt', 'y', 'phi', 'pid']
                    df_particles_herwig = pd.DataFrame(X_herwig.reshape(-1, 4), columns=columns)
                    df_particles_herwig.index = np.repeat(np.arange(X_herwig.shape[0]), X_herwig.shape[1]) + 1
                    df_particles_herwig.index.name = 'jet_id'

                    df_fjparticles_herwig_grouped = df_particles_herwig.groupby('jet_id')

                    self.df_fjparticles_herwig = df_fjparticles_herwig_grouped.apply(self.get_fjparticles)
            elif self.pt[0] == 300 or self.pt[0] == 1000 or self.pt[0] == 500 :
                if self.pt[0] == 300 and self.pt[1] == 350:
                    
                    if self.Herwig_dataset == 'True': 
                        sys.exit("ERR0R: There is not a Herwig dataset for the given pt range")
                        print()
                        
                    input_files = []
                    with open("/rstorage/ml/pythia/quark_rootified_300_350/file_list.txt","r") as csvfile:
                        reader = csv.reader(csvfile)
                        for row in reader:
                            input_files += row
                        
                    with open("/rstorage/ml/pythia/gluon_rootified_300_350/file_list.txt","r") as csvfile:
                        reader = csv.reader(csvfile)
                        for row in reader:
                            input_files += row

                if self.pt[0] == 500 and self.pt[1] == 550: # If you want to load Mateusz's and not Jesse's 
                    
                    if self.Herwig_dataset == 'True': 
                        sys.exit("ERR0R: There is not a Herwig dataset for the given pt range")
                        print()
                        
                    input_files = []
                    print("here")
                    with open("/rstorage/ml/pythia/quark_rootified/file_list.txt","r") as csvfile:
                        reader = csv.reader(csvfile)
                        for row in reader:
                            input_files += row
                        
                    with open("/rstorage/ml/pythia/gluon_rootified/file_list.txt","r") as csvfile:
                        reader = csv.reader(csvfile)
                        for row in reader:
                            input_files += row

                if self.pt[0] == 1000 and self.pt[1] == 1050:
                    
                    if self.Herwig_dataset == 'True': 
                        sys.exit("ERR0R: There is not a Herwig dataset for the given pt range")
                        print()

                    input_files = []                
                    with open("/rstorage/ml/pythia/quark_rootified_1000_1050/file_list.txt","r") as csvfile:
                        reader = csv.reader(csvfile)
                        for row in reader:
                            input_files += row
                    
                    with open("/rstorage/ml/pythia/gluon_rootified_1000_1050/file_list.txt","r") as csvfile:
                        reader = csv.reader(csvfile)
                        for row in reader:
                            input_files += row

                tree_name = 'tree_Particle_gen' # Right now we are only considering ungroomed jets
                unique_identifier =  ['run_number', 'ev_id']
                tree_columns = unique_identifier + ['ParticlePt', 'ParticleEta', 'ParticlePhi', 'ParticlePID']

                print('Convert ROOT trees to pandas dataframes...')
                print(f'    track_tree_name = {tree_name}')

                # The event numbers are only guaranteed to be consistent within a given file,
                # so we perform the groupby for each file before merging them together
                self.df_fjparticles = None
                self.y = None
                n_jets = 0
                n_jets_quark, n_jets_gluon = 0, 0
            
                quark_jet_filepattern= "pythia_quark"
                gluon_jet_filepattern = "pythia_gluon"

                for i,input_file in enumerate(input_files):
                    if (quark_jet_filepattern in input_file and n_jets_quark < self.n_total/2.) or (gluon_jet_filepattern in input_file and n_jets_gluon < self.n_total/2.):
                        
                        print(f'Loading file {i} / {len(input_files)}... ({input_file})')

                        if quark_jet_filepattern in input_file:
                            q_or_g = 'q'
                        elif gluon_jet_filepattern in input_file:
                            q_or_g = 'g'

                        
                        jet_tree = None
                        jet_df = None
                        with uproot.open(input_file)[tree_name] as jet_tree:
                            if not jet_tree:
                                raise ValueError(f'Tree {tree_name} not found in file {input_file}')
                            jet_df = uproot.concatenate(jet_tree, tree_columns, library='pd')
                            
                        jet_df['ParticleM'] = energyflow.pids2ms(jet_df['ParticlePID'], error_on_unknown=True)

                        jet_df.rename(columns={'ParticlePt': 'pt', 'ParticleEta': 'y', 'ParticlePhi': 'phi', 'ParticlePID': 'pid', 'ParticleM': 'm'}, inplace=True)
                        jet_df = jet_df.drop('pid', axis=1)

                        #jet_df.rename(columns={'ParticlePt': 'pt', 'ParticleEta': 'y', 'ParticlePhi': 'phi', 'ParticlePID': 'pid'}, inplace=True)
                        
                        # (i) Group the particle dataframe by jet
                        #     jet_df_grouped is a DataFrameGroupBy object with one particle dataframe per jet
                        jet_df_grouped = jet_df.groupby(unique_identifier)
                        
                        # (ii) Transform the DataFrameGroupBy object to a SeriesGroupBy of fastjet particles
                        df_fjparticles = jet_df_grouped.apply(self.get_fjparticles)

                        # Check if the kinematic cuts are satisfied           
                    
                        jet_pt_list, jet_eta_list, jet_mass_list = [], [], []

                        for iterator, jet in enumerate(df_fjparticles):
                            
                            jet_def = fj.JetDefinition(fj.antikt_algorithm, fj.JetDefinition.max_allowable_R)
                            cs = fj.ClusterSequence(jet, jet_def)
                            jet_selected = fj.sorted_by_pt(cs.inclusive_jets())[0]

                            jet_pt = jet_selected.pt()
                            jet_pt_list.append(jet_pt)

                            jet_eta = abs(jet_selected.eta())
                            jet_eta_list.append(jet_eta)
                            
                        pt_cut_list,  eta_cut_list,  jet_mass_cut_list = [], [], []
                        
                        for iterator, jet_pt in enumerate(jet_pt_list):
                            if self.pt[0]<= jet_pt <= self.pt[1]:  pt_cut_list.append(iterator)
                            if jet_eta_list[iterator] <= 1.7:     eta_cut_list.append(iterator)


                        cut_list = list(set(pt_cut_list) & set(eta_cut_list)) # The jets that satisfy both the eta and the pt cuts
                        
                        print(f'For file {i}, that contains the {q_or_g} Pythia dataset, {math.trunc(100*(1-len(pt_cut_list)/len(df_fjparticles)))}% jets are outside the pt range: {self.pt[0],self.pt[1]}')                    
                        print(f'For file {i}, that contains the {q_or_g} Pythia dataset, {math.trunc(100*(1-len(eta_cut_list)/len(df_fjparticles)))}% jets are outside the eta range: eta <= 1.7') 
                        print()

                        if len(jet_pt_list) != len(set(jet_pt_list)): # The pt's have ~15 digits accuracy, so if two jets have equal pt we assume that they are duplicate entries
                            sys.exit('ERROR: Duplicate jets')


                        df_fjparticles_aux = None

                        for iterator, j in enumerate(cut_list):
                            df_fjparticles_aux = pd.concat([df_fjparticles_aux, df_fjparticles[j:j+1]])

                        # Add the jets to the total list
                        self.df_fjparticles = pd.concat([self.df_fjparticles, df_fjparticles_aux])
                        n_jets = self.df_fjparticles.size
                    

                        # Set labels (Z=1, QCD=0)
                        if quark_jet_filepattern in input_file:
                            y = np.ones(len(df_fjparticles_aux))
                            n_jets_quark += len(df_fjparticles_aux)
                        elif gluon_jet_filepattern in input_file:
                            y = np.zeros(len(df_fjparticles_aux))
                            n_jets_gluon += len(df_fjparticles_aux)

                        print(f' Size of the last dataset (after the cuts): {len(df_fjparticles_aux)}')
                        print(f' n_jets = {n_jets}')
                        print(f' n_jets_q = {n_jets_quark}')
                        print(f' n_jets_g = {n_jets_gluon}')
                        print()

                        if self.y is None:
                            self.y = y
                        else:
                            self.y = np.concatenate([self.y, y])
                    
                    
                    
                    
                # n_jets will generally be more than what we want, note that it deletes the last entries -> Deletes only the qcd dataset: Systematic Error
                if n_jets  > self.n_total:
                    print(f'Number of Jets: {n_jets}')
                    self.df_fjparticles = self.df_fjparticles[:self.n_total]
                    self.y = self.y[:self.n_total]
                    n_jets = self.df_fjparticles.size
                    print(f'Final number of Jets: {n_jets}')

                print('Done!')
                print()



        # ZvsQCD Classification problem

        elif self.dataset_type == 'Zjet':            

            if self.Herwig_dataset == 'True':
                
                input_files = []
                if self.pt[0] == 500 and self.pt[1] == 550:
                    with open("/rstorage/ml/herwig/zrootified/file_list.txt","r") as csvfile:
                        reader = csv.reader(csvfile)
                        for row in reader:
                            input_files += row
                    
                    with open("/rstorage/ml/herwig/qcdrootified/file_list.txt","r") as csvfile:
                        reader = csv.reader(csvfile)
                        for row in reader:
                            input_files += row
                else: 
                    sys.exit("ERROR: There is no Herwig dataset for the given pt range")
                    print()

                #input_files = [os.path.join("/rstorage/ml/zjets_test/ztest_rn_R0.8", filename) for filename in os.listdir("/rstorage/ml/zjets_test/ztest_rn_R0.8") if '.root' in filename]
                #print(input_files)
                #time.sleep(10)
                #input_files = "/rstorage/ml/zjets_test/ztest_rn/ztest_0__0.root"
                
                tree_name = 'tree_Particle_gen' # Right now we are only considering ungroomed jets
                unique_identifier =  ['run_number', 'ev_id']
                tree_columns = unique_identifier + ['ParticlePt', 'ParticleEta', 'ParticlePhi', 'ParticlePID']

                print('Convert ROOT trees to pandas dataframes...')
                print(f'    track_tree_name = {tree_name}')


                # The event numbers are only guaranteed to be consistent within a given file,
                # so we perform the groupby for each file before merging them together
                self.df_fjparticles_herwig = None
                self.y_herwig = None
                n_jets, n_jets_z, n_jets_qcd = 0, 0, 0
                Z_jet_herwig_filepattern = "herwig_gen_z_z"
                qcd_jet_herwig_filepattern = "herwig_gen_qcd_qcd"
                
                for i, input_file in enumerate(input_files): # this is unnecessary since we only have one file for now
                    if (n_jets_z >= (self.n_test + self.n_val)/2 and Z_jet_herwig_filepattern in input_file) or (n_jets_qcd >= (self.n_test + self.n_val)/2 and qcd_jet_herwig_filepattern in input_file):
                        continue
                    
                    print(f'Loading file {i} / {len(input_files)}... ({input_file})')

                    jet_tree = None
                    jet_df = None
                    with uproot.open(input_file)[tree_name] as jet_tree: #input_files and NOT input_file because there is only one file for now
                        if not jet_tree:
                            raise ValueError(f'Tree {tree_name} not found in file {input_file}')
                        jet_df = uproot.concatenate(jet_tree, tree_columns, library='pd')
                    

                    jet_df['ParticleM'] = energyflow.pids2ms(jet_df['ParticlePID'], error_on_unknown=True)
                    

                    jet_df.rename(columns={'ParticlePt': 'pt', 'ParticleEta': 'y', 'ParticlePhi': 'phi', 'ParticlePID': 'pid', 'ParticleM': 'm'}, inplace=True)
                    jet_df = jet_df.drop('pid', axis=1)

                           
                    # (i) Group the particle dataframe by jet
                    #     jet_df_grouped is a DataFrameGroupBy object with one particle dataframe per jet
                    jet_df_grouped = jet_df.groupby(unique_identifier)
                            
                    # (ii) Transform the DataFrameGroupBy object to a SeriesGroupBy of fastjet particles
                    df_fjparticles = jet_df_grouped.apply(self.get_fjparticles)

                    # Check if the kinematic cuts are satisfied           
                    
                    jet_pt_list, jet_eta_list, jet_mass_list = [], [], []

                    for iterator, jet in enumerate(df_fjparticles):
                        
                        jet_def = fj.JetDefinition(fj.antikt_algorithm, fj.JetDefinition.max_allowable_R)
                        cs = fj.ClusterSequence(jet, jet_def)
                        jet_selected = fj.sorted_by_pt(cs.inclusive_jets())[0]

                        jet_pt = jet_selected.pt()
                        jet_pt_list.append(jet_pt)

                        jet_eta = abs(jet_selected.eta())
                        jet_eta_list.append(jet_eta)
                        
                        jet_mass = jet_selected.m()
                        jet_mass_list.append(jet_mass)
                        

                    pt_cut_list,  eta_cut_list,  jet_mass_cut_list = [], [], []
                    
                    for iterator, jet_pt in enumerate(jet_pt_list):
                        if self.pt[0]<= jet_pt <= self.pt[1]:  pt_cut_list.append(iterator)
                        if jet_eta_list[iterator] <= 1.7:     eta_cut_list.append(iterator)
                        if jet_mass_list[iterator] >= self.mj_min  and  jet_mass_list[iterator] <= self.mj_max: 
                            jet_mass_cut_list.append(iterator)

                    cut_list = list(set(pt_cut_list) & set(eta_cut_list) & set(jet_mass_cut_list)) # The jets that satisfy all the cuts

                    df_fjparticles_aux = None
                    for iterator, j in enumerate(cut_list):
                        df_fjparticles_aux = pd.concat([df_fjparticles_aux, df_fjparticles[j:j+1]])

                    # Add the jets to the total list
                    self.df_fjparticles_herwig = pd.concat([self.df_fjparticles_herwig, df_fjparticles_aux])
                    n_jets_file = df_fjparticles_aux.size
                    n_jets += n_jets_file     

                    # Set labels (Z=1, QCD=0)
                      
                    if Z_jet_herwig_filepattern in input_file: #We read the Z file first
                        z_or_qcd = 'Z'
                        n_jets_z += n_jets_file
                        if n_jets_z > (self.n_val + self.n_test)/2:
                            n_jets_file -= ( n_jets - (self.n_test + self.n_val + 1)//2)
                            self.df_fjparticles_herwig = self.df_fjparticles_herwig[:(self.n_test + self.n_val + 1)//2]
                            n_jets = self.df_fjparticles_herwig.size
                            n_jets_z = (self.n_test + self.n_val + 1)//2
                            print(f"Final number of z jets in the dataset: {n_jets_z}")
                            print()
                        y = np.ones(n_jets_file)
                        
                    elif qcd_jet_herwig_filepattern in input_file:
                        z_or_qcd = 'QCD'
                        y = np.zeros(n_jets_file)
                        n_jets_qcd += n_jets_file

                    if len(jet_pt_list) != len(set(jet_pt_list)): # The pt's have ~15 digits accuracy, so if two jets have equal pt we assume that they are duplicate entries
                        sys.exit('ERROR: Duplicate jets')



                    print(f'For file {i}, that contains the {z_or_qcd} Herwig dataset, {math.trunc(100*(1-len(pt_cut_list)/len(df_fjparticles)))}% jets are outside the pt range: [{self.pt[0],self.pt[1]}]')                    
                    print(f'For file {i}, that contains the {z_or_qcd} Herwig dataset, {math.trunc(100*(1-len(eta_cut_list)/len(df_fjparticles)))}% jets are outside the eta range:  eta <= 1.7') 
                    print(f'For file {i}, that contains the {z_or_qcd} Herwig dataset, {math.trunc(100*(1-len(jet_mass_cut_list)/len(df_fjparticles)))}% jets are outside the mass range: [{self.mj_min},{self.mj_max}] GeV') 
                    print()


                    print(f"Number of jets that satisfy the cuts: {len(cut_list)}")

                    print(f' Size of the last dataset (after the cuts): {n_jets_file}')
                    print(f' n_jets = {n_jets}')
                    print()

                    if self.y_herwig is None:
                        self.y_herwig = y
                    else:
                        self.y_herwig = np.concatenate([self.y_herwig, y])
                        
                    if n_jets >= self.n_test + self.n_val:  # We dont need more datapoint
                        break   

                # n_jets will generally be more than what we want, note that it deletes the last entries -> Deletes only the g dataset: Systematic Error
                if n_jets  > self.n_test + self.n_val:
                    print(f'Number of Herwig Jets: {n_jets}')
                    self.df_fjparticles_herwig = self.df_fjparticles_herwig[:self.n_test + self.n_val]
                    self.y_herwig = self.y_herwig[:self.n_test + self.n_val]
                    n_jets = self.df_fjparticles_herwig.size
                    print(f'Final number of Herwig Jets: {n_jets}')
                print('Done!')
                print()


            # Pythia Dataset

            # Loop through all .root files in specified directories, 
            # and for each one convert ROOT TTree into a SeriesGroupBy object of fastjet particles per event

            input_files = []

            if self.pt[0] == 300 and self.pt[1] == 350:
                with open("/rstorage/ml/pythia/zrootified_300_350_npthatmax/file_list.txt","r") as csvfile:
                    reader = csv.reader(csvfile)
                    for row in reader:
                        input_files += row
                    
                with open("/rstorage/ml/pythia/qcdrootified_300_350_npthatmax/file_list.txt","r") as csvfile:
                    reader = csv.reader(csvfile)
                    for row in reader:
                        input_files += row
            
            elif self.pt[0] == 500 and self.pt[1] == 550:
                with open("/rstorage/ml/pythia/zrootified_500_550_npthatmax/file_list.txt","r") as csvfile:
                    reader = csv.reader(csvfile)
                    for row in reader:
                        input_files += row
                    
                with open("/rstorage/ml/pythia/qcdrootified_500_550_npthatmax/file_list.txt","r") as csvfile:
                    reader = csv.reader(csvfile)
                    for row in reader:
                        input_files += row
            
            elif self.pt[0] == 1000 and self.pt[1] == 1100:
                with open("/rstorage/ml/pythia/zrootified_1000_1100/file_list.txt","r") as csvfile:
                    reader = csv.reader(csvfile)
                    for row in reader:
                        input_files += row
                    
                with open("/rstorage/ml/pythia/qcdrootified_1000_1100/file_list.txt","r") as csvfile:
                    reader = csv.reader(csvfile)
                    for row in reader:
                        input_files += row
            
            elif self.pt[0] == 1000 and self.pt[1] == 1050:
                with open("/rstorage/ml/pythia/zrootified_1000_1050/file_list.txt","r") as csvfile:
                    reader = csv.reader(csvfile)
                    for row in reader:
                        input_files += row
                    
                with open("/rstorage/ml/pythia/qcdrootified_1000_1050/file_list.txt","r") as csvfile:
                    reader = csv.reader(csvfile)
                    for row in reader:
                        input_files += row

            else:
                sys.exit("ERROR: Not the correct pt range")

            tree_name = 'tree_Particle_gen' # Right now we are only considering ungroomed jets
            unique_identifier =  ['run_number', 'ev_id']
            tree_columns = unique_identifier + ['ParticlePt', 'ParticleEta', 'ParticlePhi', 'ParticlePID']

            print('Convert ROOT trees to pandas dataframes...')
            print(f'    track_tree_name = {tree_name}')

            # The event numbers are only guaranteed to be consistent within a given file,
            # so we perform the groupby for each file before merging them together
            self.df_fjparticles = None
            self.y = None
            n_jets = 0
            self.n_jets_z = self.n_jets_qcd = 0
            
            self.Z_jet_filepattern= "pythia_z"
            self.QCD_jet_filepattern = "pythia_qcd"

            for i,input_file in enumerate(input_files):
                if (self.Z_jet_filepattern in input_file and self.n_jets_z < self.n_total/2.) or (self.QCD_jet_filepattern in input_file and self.n_jets_qcd < self.n_total/2.):
                    
                    print(f'Loading file {i} / {len(input_files)}... ({input_file})')

                    if self.Z_jet_filepattern in input_file:
                        z_or_qcd = 'Z'
                    elif self.QCD_jet_filepattern in input_file:
                        z_or_qcd = 'QCD'

                    
                    jet_tree = None
                    jet_df = None
                    with uproot.open(input_file)[tree_name] as jet_tree:
                        if not jet_tree:
                            raise ValueError(f'Tree {tree_name} not found in file {input_file}')
                        jet_df = uproot.concatenate(jet_tree, tree_columns, library='pd')

                    jet_df['ParticleM'] = energyflow.pids2ms(jet_df['ParticlePID'], error_on_unknown=True)
                    
                    #print(jet_df)

                    jet_df.rename(columns={'ParticlePt': 'pt', 'ParticleEta': 'y', 'ParticlePhi': 'phi', 'ParticlePID': 'pid', 'ParticleM': 'm'}, inplace=True)
                    jet_df = jet_df.drop('pid', axis=1)
                    #print(jet_df)
                    # (i) Group the particle dataframe by jet
                    #     jet_df_grouped is a DataFrameGroupBy object with one particle dataframe per jet
                    jet_df_grouped = jet_df.groupby(unique_identifier)
                    
                    # (ii) Transform the DataFrameGroupBy object to a SeriesGroupBy of fastjet particles
                    df_fjparticles = jet_df_grouped.apply(self.get_fjparticles)
                    
                    # Check if the kinematic cuts are satisfied           
                    
                    jet_pt_list, jet_eta_list, jet_mass_list = [], [], []

                    for iterator, jet in enumerate(df_fjparticles):
                        
                        jet_def = fj.JetDefinition(fj.antikt_algorithm, fj.JetDefinition.max_allowable_R)
                        cs = fj.ClusterSequence(jet, jet_def)
                        jet_selected = fj.sorted_by_pt(cs.inclusive_jets())[0]

                        jet_pt = jet_selected.pt()
                        jet_pt_list.append(jet_pt)

                        jet_eta = abs(jet_selected.eta())
                        jet_eta_list.append(jet_eta)
                        
                        jet_mass = jet_selected.m()
                        jet_mass_list.append(jet_mass)
                        

                    pt_cut_list,  eta_cut_list,  jet_mass_cut_list = [], [], []
                    
                    for iterator, jet_pt in enumerate(jet_pt_list):
                        if self.pt[0] <= jet_pt <= self.pt[1]:  pt_cut_list.append(iterator)
                        if jet_eta_list[iterator] <= 1.7:       eta_cut_list.append(iterator)
                        if self.mj_min <= jet_mass_list[iterator] <= self.mj_max:   jet_mass_cut_list.append(iterator)


                    print(f'For file {i}, that contains the {z_or_qcd} Pythia dataset, {math.trunc(100*(1-len(pt_cut_list)/len(df_fjparticles)))}% jets are outside the pt range: {self.pt[0],self.pt[1]}')                    
                    print(f'For file {i}, that contains the {z_or_qcd} Pythia dataset, {math.trunc(100*(1-len(eta_cut_list)/len(df_fjparticles)))}% jets are outside the eta range: eta <= 1.7') 
                    print(f'For file {i}, that contains the {z_or_qcd} Pythia dataset, {math.trunc(100*(1-len(jet_mass_cut_list)/len(df_fjparticles)))}% jets are outside the mass range ({self.mj_min},{self.mj_max}) GeV') 
                    print()

                    if len(jet_pt_list) != len(set(jet_pt_list)): # The pt's have ~15 digits accuracy, so if two jets have equal pt we assume that they are duplicate entries
                        sys.exit('ERROR: Duplicate jets')


                    df_fjparticles_aux = None
                    cut_list = list(set(pt_cut_list) & set(eta_cut_list) & set(jet_mass_cut_list)) # The jets that satisfy both the eta and the pt cuts
                    
                    for iterator, j in enumerate(cut_list):
                        df_fjparticles_aux = pd.concat([df_fjparticles_aux, df_fjparticles[j:j+1]])
                        
                    # Add the jets to the total list
                    self.df_fjparticles = pd.concat([self.df_fjparticles, df_fjparticles_aux])
                    n_jets = self.df_fjparticles.size
                    

                    # Set labels (Z=1, QCD=0)
                    if self.Z_jet_filepattern in input_file:
                        y = np.ones(len(df_fjparticles_aux))
                        self.n_jets_z += len(df_fjparticles_aux)
                    elif self.QCD_jet_filepattern in input_file:
                        y = np.zeros(len(df_fjparticles_aux))
                        self.n_jets_qcd += len(df_fjparticles_aux)

                    print(f' Size of the last dataset (after the cuts): {len(df_fjparticles_aux)}')
                    print(f' n_jets = {n_jets}')
                    print(f' n_jets_z = {self.n_jets_z}')
                    print(f' n_jets_qcd = {self.n_jets_qcd}')
                    print()

                    if self.y is None:
                        self.y = y
                    else:
                        self.y = np.concatenate([self.y, y])
                    
            # n_jets will generally be more than what we want, note that it deletes the last entries -> Deletes only the qcd dataset: Systematic Error
            if n_jets  > self.n_total:
                print(f'Number of Jets: {n_jets}')
                self.df_fjparticles = self.df_fjparticles[:self.n_total]
                self.y = self.y[:self.n_total]
                n_jets = self.df_fjparticles.size
                print(f'Final number of Jets: {n_jets}')

            print('Done!')
            print()



    #---------------------------------------------------------------
    # Main processing function
    #---------------------------------------------------------------
    def process_qg(self):

        # Loop over events and do jet finding
        # Fill each of the jet_variables into a list
        fj.ClusterSequence.print_banner()
        print('Finding jets and computing N-subjettiness and subjets...')


        # PYTHIA DATASET 
        
        result = [self.analyze_event(fj_particles, 'pythia') for fj_particles in self.df_fjparticles]
        

        # Leading Angle
        
        for r in self.r_list:
                for N in self.N_cluster_list:
                    for col in range(self.n_total):
                        count_q=0
                        count_g=0
                        if self.y[col] == 1:
                            count_q = self.output['leading_angle'][f'r{r}_N{N}'][col]
                            self.output['leading_angle'][f'r{r}_N{N}_q'].append(count_q)
                            count_q = self.output['leading_angle_13'][f'r{r}_N{N}'][col]
                            self.output['leading_angle_13'][f'r{r}_N{N}_q'].append(count_q)
                            count_q = self.output['leading_angle_14'][f'r{r}_N{N}'][col]
                            self.output['leading_angle_14'][f'r{r}_N{N}_q'].append(count_q)
                            count_q = self.output['leading_angle_23'][f'r{r}_N{N}'][col]
                            self.output['leading_angle_23'][f'r{r}_N{N}_q'].append(count_q)
                            count_q = self.output['leading_angle_min1323'][f'r{r}_N{N}'][col]
                            self.output['leading_angle_min1323'][f'r{r}_N{N}_q'].append(count_q)
                            count_q = self.output['leading_angle_max1323'][f'r{r}_N{N}'][col]
                            self.output['leading_angle_max1323'][f'r{r}_N{N}_q'].append(count_q)
                        if self.y[col] == 0:
                            count_g = self.output['leading_angle'][f'r{r}_N{N}'][col]
                            self.output['leading_angle'][f'r{r}_N{N}_g'].append(count_g)
                            count_g = self.output['leading_angle_13'][f'r{r}_N{N}'][col]
                            self.output['leading_angle_13'][f'r{r}_N{N}_g'].append(count_g)
                            count_g = self.output['leading_angle_14'][f'r{r}_N{N}'][col]
                            self.output['leading_angle_14'][f'r{r}_N{N}_g'].append(count_g)
                            count_g = self.output['leading_angle_23'][f'r{r}_N{N}'][col]
                            self.output['leading_angle_23'][f'r{r}_N{N}_g'].append(count_g)
                            count_g = self.output['leading_angle_min1323'][f'r{r}_N{N}'][col]
                            self.output['leading_angle_min1323'][f'r{r}_N{N}_g'].append(count_g)
                            count_g = self.output['leading_angle_max1323'][f'r{r}_N{N}'][col]
                            self.output['leading_angle_max1323'][f'r{r}_N{N}_g'].append(count_g)


        # Subjet Multiplicity

        zcut = 0.0

        for r in self.r_list:
            for N in self.N_cluster_list:
                for col in range(self.n_total):
                    count_q=0
                    count_g=0
                    if self.y[col] == 1:
                        for row in range(N):
                            if self.output[f'subjet'][f'r{r}_N{N}_z'][col][row] > zcut:
                                count_q+= math.ceil(self.output[f'subjet'][f'r{r}_N{N}_z'][col][row])
                        self.output['subjet_multiplicity'][f'r{r}_N{N}_q'].append(count_q)
                    if self.y[col] == 0:
                        for row in range(N):
                            if self.output[f'subjet'][f'r{r}_N{N}_z'][col][row] > zcut:
                                count_g+= math.ceil(self.output[f'subjet'][f'r{r}_N{N}_z'][col][row])
                        self.output['subjet_multiplicity'][f'r{r}_N{N}_g'].append(count_g)

                print()
                print(f'r = {r}, N = {N}')
                print(f'Z dataset, average subjet multiplicity, median subjet multiplicity and max number of subjets:')
                print(statistics.mean(self.output['subjet_multiplicity'][f'r{r}_N{N}_q']), statistics.median(self.output['subjet_multiplicity'][f'r{r}_N{N}_q']), max(self.output['subjet_multiplicity'][f'r{r}_N{N}_q']))
                print(f'QCD dataset, average subjet multiplicity, median subjet multiplicity  and max number of subjets:')
                print(statistics.mean(self.output['subjet_multiplicity'][f'r{r}_N{N}_g']), statistics.median(self.output['subjet_multiplicity'][f'r{r}_N{N}_g']), max(self.output['subjet_multiplicity'][f'r{r}_N{N}_g']))
            
        


        # Hardest Subjet Momenta Distribution
        
        for r in self.r_list:
            for N in self.N_cluster_list:
                for col in range(self.n_total):
                    z_q=0
                    z_g=0
                    if self.y[col] == 1:
                      #  for row in range(N):
                        z_q = self.output[f'subjet'][f'r{r}_N{N}_z'][col][0]
                        self.output['hardest_subjet_z'][f'r{r}_N{N}_q'].append(z_q)
                    if self.y[col] == 0:
                        #for row in range(N):
                        z_g = self.output[f'subjet'][f'r{r}_N{N}_z'][col][0]
                        self.output['hardest_subjet_z'][f'r{r}_N{N}_g'].append(z_g)
        
        # 4 Hardest Subjet Momenta Distribution
        
        for r in self.r_list:
            for N in self.N_cluster_list:
                for col in range(self.n_total):
                    z_q=0
                    z_g=0
                    if self.y[col] == 1:
                        z_q1 = self.output[f'subjet'][f'r{r}_N{N}_z'][col][0]
                        try: 
                            z_q2 = self.output[f'subjet'][f'r{r}_N{N}_z'][col][1]
                        except:
                            z_q2 = 0
                        try:
                            z_q3 = self.output[f'subjet'][f'r{r}_N{N}_z'][col][2]
                        except:
                            z_q3 = 0
                        try:
                            z_q4 = self.output[f'subjet'][f'r{r}_N{N}_z'][col][3]
                        except:
                            z_q4 = 0
                        
                        self.output['4_hardest_subjets_z'][f'r{r}_N{N}_q1'].append(z_q1)
                        self.output['4_hardest_subjets_z'][f'r{r}_N{N}_q2'].append(z_q2)
                        self.output['4_hardest_subjets_z'][f'r{r}_N{N}_q3'].append(z_q1)
                        self.output['4_hardest_subjets_z'][f'r{r}_N{N}_q4'].append(z_q2)
                    if self.y[col] == 0:
                        z_g1 = self.output[f'subjet'][f'r{r}_N{N}_z'][col][0]
                        try: 
                            z_g2 = self.output[f'subjet'][f'r{r}_N{N}_z'][col][1]
                        except:
                            z_g2 = 0
                        try:
                            z_g3 = self.output[f'subjet'][f'r{r}_N{N}_z'][col][2]
                        except:
                            z_g3 = 0
                        try:
                            z_g4 = self.output[f'subjet'][f'r{r}_N{N}_z'][col][3]
                        except:
                            z_g4 = 0
                        
                        self.output['4_hardest_subjets_z'][f'r{r}_N{N}_g1'].append(z_g1)
                        self.output['4_hardest_subjets_z'][f'r{r}_N{N}_g2'].append(z_g2)
                        self.output['4_hardest_subjets_z'][f'r{r}_N{N}_g3'].append(z_g3)
                        self.output['4_hardest_subjets_z'][f'r{r}_N{N}_g4'].append(z_g4)
        
        
        # WTA Subjet Momenta Distribution
        self.wta_axis= 'False'
        if self.wta_axis == 'True':
            for r in self.r_list:
                for N in self.N_cluster_list:
                    for col in range(self.n_total):
                        z_q=0
                        z_g=0
                        if self.y[col] == 1:
                            z_q = self.output[f'subjet'][f'r{r}_N{N}_z'][col][self.output['wta_subjet'][f'r{r}_N{N}'][col]]
                            self.output['wta_subjet_z'][f'r{r}_N{N}_q'].append(z_q)
                        if self.y[col] == 0:
                            z_g = self.output[f'subjet'][f'r{r}_N{N}_z'][col][self.output['wta_subjet'][f'r{r}_N{N}'][col]]
                            self.output['wta_subjet_z'][f'r{r}_N{N}_g'].append(z_g)


        # Subjet Momenta Distribution
        
        z_cut = 0
        for r in self.r_list:
            for N in self.N_cluster_list:
                for col in range(self.n_total):
                    z_q=0
                    z_g=0
                    if self.y[col] == 1:
                        for row in range(N):
                            z_q = self.output[f'subjet'][f'r{r}_N{N}_z'][col][row]
                            if z_q >= z_cut:
                                self.output['subjet_z'][f'r{r}_N{N}_q'].append(z_q)
                    if self.y[col] == 0:
                        for row in range(N):
                            z_g = self.output[f'subjet'][f'r{r}_N{N}_z'][col][row]
                            if z_g >= z_cut:
                                self.output['subjet_z'][f'r{r}_N{N}_g'].append(z_g)

        
        # HERWIG DATASET 

        if self.Herwig_dataset == 'True':

            print()
            print("Herwig Dataset:")
            result = [self.analyze_event(fj_particles, 'herwig') for fj_particles in self.df_fjparticles_herwig]            
            
            for r in self.r_list:
                for N in self.N_cluster_list:
                    for col in range(self.n_val + self.n_test):
                        count_q=0
                        count_g=0
                        if self.y_herwig[col] == 1:
                            for row in range(N):
                                if self.output[f'subjet'][f'herwig_r{r}_N{N}_z'][col][row] > zcut:
                                    count_q+= math.ceil(self.output[f'subjet'][f'herwig_r{r}_N{N}_z'][col][row])
                            self.output['subjet_multiplicity'][f'herwig_r{r}_N{N}_q'].append(count_q)
                        if self.y_herwig[col] == 0: 
                            for row in range(N):
                                if self.output[f'subjet'][f'herwig_r{r}_N{N}_z'][col][row] > zcut:
                                    count_g+= math.ceil(self.output[f'subjet'][f'herwig_r{r}_N{N}_z'][col][row])
                            self.output['subjet_multiplicity'][f'herwig_r{r}_N{N}_g'].append(count_g)
                            

                    print()
                    print(f'r = {r}, N = {N}')
                    print(f'Z dataset Herwig, average subjet multiplicity and max number of subjets:')
                    print(sum(self.output['subjet_multiplicity'][f'herwig_r{r}_N{N}_q'])/len(self.output['subjet_multiplicity'][f'herwig_r{r}_N{N}_q']), max(self.output['subjet_multiplicity'][f'herwig_r{r}_N{N}_q']))
                    print(f'QCD dataset Herwig, average subjet multiplicity and max number of subjets:')
                    print(sum(self.output['subjet_multiplicity'][f'herwig_r{r}_N{N}_g'])/len(self.output['subjet_multiplicity'][f'herwig_r{r}_N{N}_g']), max(self.output['subjet_multiplicity'][f'herwig_r{r}_N{N}_g']))
        

            # Leading Angle
            
            for r in self.r_list:
                    for N in self.N_cluster_list:
                        for col in range(self.n_val + self.n_test):
                            count_q=0
                            count_g=0
                            if self.y_herwig[col] == 1:
                                count_q = self.output['leading_angle'][f'herwig_r{r}_N{N}'][col]
                                self.output['leading_angle'][f'herwig_r{r}_N{N}_q'].append(count_q)
                                count_q = self.output['leading_angle_13'][f'herwig_r{r}_N{N}'][col]
                                self.output['leading_angle_13'][f'herwig_r{r}_N{N}_q'].append(count_q)
                                count_q = self.output['leading_angle_14'][f'herwig_r{r}_N{N}'][col]
                                self.output['leading_angle_14'][f'herwig_r{r}_N{N}_q'].append(count_q)
                                count_q = self.output['leading_angle_23'][f'herwig_r{r}_N{N}'][col]
                                self.output['leading_angle_23'][f'herwig_r{r}_N{N}_q'].append(count_q)
                                count_q = self.output['leading_angle_min1323'][f'herwig_r{r}_N{N}'][col]
                                self.output['leading_angle_min1323'][f'herwig_r{r}_N{N}_q'].append(count_q)
                                count_q = self.output['leading_angle_max1323'][f'herwig_r{r}_N{N}'][col]
                                self.output['leading_angle_max1323'][f'herwig_r{r}_N{N}_q'].append(count_q)
                            if self.y_herwig[col] == 0:
                                count_g = self.output['leading_angle'][f'herwig_r{r}_N{N}'][col]
                                self.output['leading_angle'][f'herwig_r{r}_N{N}_g'].append(count_g)
                                count_g = self.output['leading_angle_13'][f'herwig_r{r}_N{N}'][col]
                                self.output['leading_angle_13'][f'herwig_r{r}_N{N}_g'].append(count_g)
                                count_g = self.output['leading_angle_14'][f'herwig_r{r}_N{N}'][col]
                                self.output['leading_angle_14'][f'herwig_r{r}_N{N}_g'].append(count_g)
                                count_g = self.output['leading_angle_23'][f'herwig_r{r}_N{N}'][col]
                                self.output['leading_angle_23'][f'herwig_r{r}_N{N}_g'].append(count_g)
                                count_g = self.output['leading_angle_min1323'][f'herwig_r{r}_N{N}'][col]
                                self.output['leading_angle_min1323'][f'herwig_r{r}_N{N}_g'].append(count_g)
                                count_g = self.output['leading_angle_max1323'][f'herwig_r{r}_N{N}'][col]
                                self.output['leading_angle_max1323'][f'herwig_r{r}_N{N}_g'].append(count_g)
                                
            # 4 Hardest Momenta

            for r in self.r_list:
                for N in self.N_cluster_list:
                    for col in range(self.n_val + self.n_test):
                        if self.y_herwig[col] == 1:
                            z_q1 = self.output[f'subjet'][f'herwig_r{r}_N{N}_z'][col][0]
                            try: 
                                z_q2 = self.output[f'subjet'][f'herwig_r{r}_N{N}_z'][col][1]
                            except:
                                z_q2 = 0
                            try:
                                z_q3 = self.output[f'subjet'][f'herwig_r{r}_N{N}_z'][col][2]
                            except:
                                z_q3 = 0
                            try:
                                z_q4 = self.output[f'subjet'][f'herwig_r{r}_N{N}_z'][col][3]
                            except:
                                z_q4 = 0
                            
                            self.output['4_hardest_subjets_z'][f'herwig_r{r}_N{N}_q1'].append(z_q1)
                            self.output['4_hardest_subjets_z'][f'herwig_r{r}_N{N}_q2'].append(z_q2)
                            self.output['4_hardest_subjets_z'][f'herwig_r{r}_N{N}_q3'].append(z_q1)
                            self.output['4_hardest_subjets_z'][f'herwig_r{r}_N{N}_q4'].append(z_q2)
                        if self.y_herwig[col] == 0:
                            z_g1 = self.output[f'subjet'][f'herwig_r{r}_N{N}_z'][col][0]
                            try: 
                                z_g2 = self.output[f'subjet'][f'herwig_r{r}_N{N}_z'][col][1]
                            except:
                                z_g2 = 0
                            try:
                                z_g3 = self.output[f'subjet'][f'herwig_r{r}_N{N}_z'][col][2]
                            except:
                                z_g3 = 0
                            try:
                                z_g4 = self.output[f'subjet'][f'herwig_r{r}_N{N}_z'][col][3]
                            except:
                                z_g4 = 0
                            
                            self.output['4_hardest_subjets_z'][f'herwig_r{r}_N{N}_g1'].append(z_g1)
                            self.output['4_hardest_subjets_z'][f'herwig_r{r}_N{N}_g2'].append(z_g2)
                            self.output['4_hardest_subjets_z'][f'herwig_r{r}_N{N}_g3'].append(z_g3)
                            self.output['4_hardest_subjets_z'][f'herwig_r{r}_N{N}_g4'].append(z_g4)
        

        # Transform the dictionary of lists into a dictionary of numpy arrays
        self.output_numpy = {}
        for key,value in self.output.items():
            self.output_numpy[key] = self.transform_to_numpy(value)

        
        # Reformat output for ML algorithms (array with 1 array per jet which contain all N-subjettiness values)
        self.output_final = {}
        self.output_final['nsub'] = np.array([list(self.output_numpy['nsub'].values())])[0].T
        
        for key,val in self.output_numpy['subjet'].items():
            self.output_final[f'subjet_{key}'] = val
            print(key)

        # Write jet arrays to file
        with h5py.File(os.path.join(self.output_dir, 'subjets_unshuffled.h5'), 'w') as hf:
            print('-------------------------------------')

            # Write labels: gluon 0, quark 1
            hf.create_dataset(f'y', data=self.y)
            print(f'labels: {self.y.shape}')
            
            if self.Herwig_dataset == 'True':
                hf.create_dataset(f'y_herwig', data=self.y_herwig)


            # Write numpy arrays
            for key,val in self.output_final.items():
                hf.create_dataset(key, data=val)
                print(f'{key}: {val.shape}')

                # Check whether any training entries are empty
                [print(f'WARNING: input entry {i} is empty') for i,x in enumerate(val) if not x.any()]

            for qa_observable in self.output['qa']:
                hf.create_dataset(f'{qa_observable}', data=self.output_numpy['qa'][qa_observable])
                print(f'{qa_observable}')

            # Make some QA plots
            self.plot_QA()

            # Store some info on the output directory so that we don't need to remember the exact details of the config when we run the code at a later date

            hf.create_dataset('N_list', data=self.N_list)
            hf.create_dataset('beta_list', data=self.beta_list)
            hf.create_dataset('r_list', data=self.r_list)
            hf.create_dataset('N_max', data=self.N_max_list)
            hf.create_dataset('n_total', data = self.n_total)
            hf.create_dataset('Clustering_Alg', data = self.Clustering_Alg)
            hf.create_dataset('Laman_construction', data = self.Laman_construction)
            hf.create_dataset('N_clustering', data = self.N_cluster_list)   
            hf.create_dataset('Herwig_dataset', data = self.Herwig_dataset)        

            

    #---------------------------------------------------------------
    # Process an event
    #---------------------------------------------------------------
    def analyze_event(self, fj_particles, dataset_choice):
    
        # Check that the entries exist appropriately
        if fj_particles and type(fj_particles) != fj.vectorPJ:
            print('fj_particles type mismatch -- skipping event')
            return

        # Find jets -- one jet per "event".  We only use antikt for the Jet Clustering
        jet_def = fj.JetDefinition(fj.antikt_algorithm, fj.JetDefinition.max_allowable_R)

        cs = fj.ClusterSequence(fj_particles, jet_def)
        jet_selected = fj.sorted_by_pt(cs.inclusive_jets())[0]

        # Compute jet quantities and store in our data structures
        self.analyze_jets(jet_selected, dataset_choice)

        self.event_index += 1
        if self.event_index%1000 == 0:
            print(f'event: {self.event_index}  --  {int(time.time() - self.start_time)}s')

    #---------------------------------------------------------------
    # Analyze jets of a given event.
    #---------------------------------------------------------------
    def analyze_jets(self, jet_selected, dataset_choice):
        self.fill_nsubjettiness(jet_selected, dataset_choice)
        self.fill_subjets(jet_selected, dataset_choice)
        self.fill_qa(jet_selected)

    #---------------------------------------------------------------
    # Compute Nsubjettiness of jet
    #---------------------------------------------------------------
    def fill_nsubjettiness(self, jet, dataset_choice):
        
        axis_definition = fjcontrib.KT_Axes()
        axis_definition2 = fjcontrib.WTA_KT_Axes()
        axis_definition3 = fjcontrib.OnePass_KT_Axes()
        for i,N in enumerate(self.N_list):
            
            beta = self.beta_list[i]
            measure_definition = fjcontrib.UnnormalizedMeasure(beta)
            n_subjettiness_calculator = fjcontrib.Nsubjettiness(N, axis_definition3, measure_definition)
            n_subjettiness = n_subjettiness_calculator.result(jet)/jet.pt()
            
            self.output['nsub'][f'N{N}_beta{beta}'].append(n_subjettiness)


            if dataset_choice =='Herwig':
                beta = self.beta_list[i]
                measure_definition = fjcontrib.UnnormalizedMeasure(beta)
                n_subjettiness_calculator = fjcontrib.Nsubjettiness(N, axis_definition, measure_definition)
                n_subjettiness = n_subjettiness_calculator.result(jet)/jet.pt()
                self.output['nsub_herwig'][f'N{N}_beta{beta}'].append(n_subjettiness)



    #---------------------------------------------------------------
    # Compute subjet kinematics...
    #---------------------------------------------------------------
    def fill_subjets(self, jet, dataset_choice):
        
        if self.subjet_basis == 'inclusive':
            self.N_cluster_list = self.N_max_list
        elif self.subjet_basis == 'exclusive':
            self.N_cluster_list = self.njet_list
        else:
            sys.exit(f'ERROR: Invalid choice for subjet_basis')

        # Pt sorted hadrons
        if dataset_choice == 'pythia':
            self.output['Jet_Mass']['mass'].append(jet.m())

        hadrons_aux  = fj.sorted_by_pt(jet.constituents())

        # WTA Axes

        jet_def_wta = fj.JetDefinition(fj.kt_algorithm, 2*self.R) #to cluster the whole jet again, with WTA this time
        jet_def_wta.set_recombination_scheme(fj.WTA_pt_scheme)

        reclusterer_wta = fjcontrib.Recluster(jet_def_wta)
        jet_wta = reclusterer_wta.result(jet)

        for r in self.r_list:

            if self.Clustering_Alg == 'kt_algorithm':
                subjet_def = fj.JetDefinition(fj.kt_algorithm, r)
            elif self.Clustering_Alg == 'antikt_algorithm':
                subjet_def = fj.JetDefinition(fj.antikt_algorithm, r)
            elif self.Clustering_Alg == 'cambridge_algorithm':
                subjet_def = fj.JetDefinition(fj.cambridge_algorithm, r)
            else:
                sys.exit(f'ERROR: Wrong Clustering_Algorithm.')

            cs_subjet = fj.ClusterSequence(jet.constituents(), subjet_def)
            

            # To find which subjet contains the WTA axes, i.e. WTA subjet
            for N_cluster in self.N_cluster_list:

                if self.subjet_basis == 'inclusive':
                    subjets = fj.sorted_by_pt(cs_subjet.inclusive_jets())
                elif self.subjet_basis == 'exclusive':
                    subjets = fj.sorted_by_pt(cs_subjet.exclusive_jets_up_to(N_cluster))


                # Which hadron has the same axis as the WTA jet
                for N in range(len(hadrons_aux)):
                    deltaR_wtahadron = jet_wta.delta_R(hadrons_aux[N])
                    if deltaR_wtahadron==0:
                        wtahadron=N
                        break 
                
                # In which subjet does it belong to
                for i in range(len(subjets)):
                    for j in range(len(subjets[i].constituents())):
                        deltaR_wtasubjet = subjets[i].constituents()[j].delta_R(hadrons_aux[wtahadron])
                        if deltaR_wtasubjet==0:
                            wtasubjet=i
                            self.output['wta_subjet'][f'r{r}_N{N_cluster}'].append(wtasubjet)
                            # Break the loop to save time
                            break 
                    else:
                        # Continue if the inner loop wasn't broken.
                        continue
                    # Inner loop was broken, break the outer
                    break        


            # Construct a Laman graph for each jet, and save the edges (node connections) and angles
            for N_cluster in self.N_cluster_list:

                edges_list = []
                angles_list = []
                subjet_phi_list=[]
                subjet_rap_list=[]
                z_list = []
                leading_angle = []
                leading_angle_13 = []
                leading_angle_23 = []
                leading_angle_14 = []
                leading_angle_min1323 = []
                leading_angle_max1323 = []
                if self.subjet_basis == 'inclusive':
                    subjets = fj.sorted_by_pt(cs_subjet.inclusive_jets())
                elif self.subjet_basis == 'exclusive':
                    subjets = fj.sorted_by_pt(cs_subjet.exclusive_jets_up_to(N_cluster))

                zcut = 0.0
                for N in range(N_cluster): #the max number of N is N_max-1 because we start from 0
                    # First, fill the z values of the node + (η,φ) for the subjets
                    if N < len(subjets):
                        z = subjets[N].pt()/jet.pt()
                        if z > zcut:
                            z_list.append(z)
                            subjet_phi = subjets[N].phi()
                            subjet_rap = subjets[N].rap()
                            subjet_phi_list.append(subjet_phi)
                            subjet_rap_list.append(subjet_rap)
                        else:
                            z_list.append(0)
                            subjet_phi_list.append(0)
                            subjet_rap_list.append(0)

                    else:
                        z_list.append(0)
                        subjet_phi_list.append(0)
                        subjet_rap_list.append(0)
                    
                    #Leading Angle

                    if len(subjets)>=2:
                        if N==1:
                            leading_angle.append(subjets[0].delta_R(subjets[1]))
                    else:
                        if N==1:
                            leading_angle.append(0) 

                    if len(subjets)>=3:
                        if N==1:
                            leading_angle_13.append(subjets[0].delta_R(subjets[2]))
                    else:
                        if N==1:
                            leading_angle_13.append(0) 

                    if len(subjets)>=3:
                        if N==1:
                            leading_angle_23.append(subjets[1].delta_R(subjets[2]))
                    else:
                        if N==1:
                            leading_angle_23.append(0) 

                    if len(subjets)>=3:
                        if N==1:
                            leading_angle_min1323.append(min(subjets[1].delta_R(subjets[2]),subjets[0].delta_R(subjets[2])))
                    else:
                        if N==1:
                            leading_angle_min1323.append(0) 

                    if len(subjets)>=3:
                        if N==1:
                            leading_angle_max1323.append(max(subjets[1].delta_R(subjets[2]),subjets[0].delta_R(subjets[2])))
                    else:
                        if N==1:
                            leading_angle_max1323.append(0) 

                    if len(subjets)>=4:
                        if N==1:
                            leading_angle_14.append(subjets[0].delta_R(subjets[3]))
                    else:
                        if N==1:
                            leading_angle_14.append(0) 


                    # Henneberg construction using Type 1 connections
                    # To start, let's just build based on pt ordering
                    # A simple construction is to have each node N connected to nodes N+1,N+2
                    # We will also zero-pad for now (edges denoted [-1,-1]) to keep fixed-size arrays

                    if self.laman_load == 'True':
                        if self.Laman_construction == 'naive':
                            if N < N_cluster-1: 
                                if N < len(subjets)-1: 
                                    angle = subjets[N].delta_R(subjets[N+1])
                                    edges_list.append(np.array([N, N+1])) #in order to know to which pair the angle's list entry corresponds to 
                                    angles_list.append(angle)
                                else:
                                    edges_list.append(np.array([-1, -1]))
                                    angles_list.append(0)

                            if N < N_cluster-2:
                                if N < len(subjets)-2:
                                    angle = subjets[N].delta_R(subjets[N+2])
                                    edges_list.append(np.array([N, N+2]))
                                    angles_list.append(angle) 
                                else:
                                    edges_list.append(np.array([-1, -1]))
                                    angles_list.append(0)

                        elif self.Laman_construction == '1N':
                            if N == 0:
                                for i in range(N_cluster-1): # Because we want to start from i=1 
                                    if i < len(subjets)-1:
                                        angle = subjets[0].delta_R(subjets[i+1])
                                        edges_list.append(np.array([0, i+1])) #in order to know to which pair the angle's list entry corresponds to 
                                        angles_list.append(angle)
                                    else:
                                        edges_list.append(np.array([0, -1]))
                                        angles_list.append(0)
                                
                            elif N < N_cluster-1:
                                if N < len(subjets)-1:
                                    angle = subjets[N].delta_R(subjets[N+1])
                                    edges_list.append(np.array([N, N+1]))
                                    angles_list.append(angle) 
                                else:
                                    edges_list.append(np.array([-1, -1]))
                                    angles_list.append(0)

                        elif self.Laman_construction == '1N2N':
                            if N == 0:
                                for i in range(len(subjets)-1): # Because we want to start from i=1
                                    if i < len(subjets)-1:
                                        angle = subjets[0].delta_R(subjets[i+1])
                                        edges_list.append(np.array([0, i+1])) #in order to know to which pair the angle's list entry corresponds to 
                                        angles_list.append(angle)
                                    else:
                                        edges_list.append(np.array([0, -1]))
                                        angles_list.append(0)
                            elif N == 1:
                                for i in range(len(subjets)-2): # Because we want to start from i=2
                                    if i < len(subjets)-2:
                                        angle = subjets[1].delta_R(subjets[i+2])
                                        edges_list.append(np.array([1, i+2])) #in order to know to which pair the angle's list entry corresponds to 
                                        angles_list.append(angle)
                                    else:
                                        edges_list.append(np.array([1, -1]))
                                        angles_list.append(0)         
                        else:
                            sys.exit(f'Wrong Laman Construction Algorithm.')

                

                if dataset_choice == 'pythia':
                    if self.laman_load == 'True':
                        self.output[f'subjet'][f'r{r}_N{N_cluster}_edges'].append(np.array(edges_list))
                        self.output[f'subjet'][f'r{r}_N{N_cluster}_angles'].append(np.array(angles_list))
                    self.output[f'subjet'][f'r{r}_N{N_cluster}_z'].append(np.array(z_list))
                    self.output[f'subjet'][f'r{r}_N{N_cluster}_sub_phi'].append(np.array(subjet_phi_list))
                    self.output[f'subjet'][f'r{r}_N{N_cluster}_sub_rap'].append(np.array(subjet_rap_list))
                    self.output[f'leading_angle'][f'r{r}_N{N_cluster}'].append(leading_angle)
                    self.output[f'leading_angle_13'][f'r{r}_N{N_cluster}'].append(leading_angle_13)
                    self.output[f'leading_angle_23'][f'r{r}_N{N_cluster}'].append(leading_angle_23)
                    self.output[f'leading_angle_14'][f'r{r}_N{N_cluster}'].append(leading_angle_14)
                    self.output[f'leading_angle_min1323'][f'r{r}_N{N_cluster}'].append(leading_angle_min1323)
                    self.output[f'leading_angle_max1323'][f'r{r}_N{N_cluster}'].append(leading_angle_max1323)

                    
                    
                elif dataset_choice == 'herwig':
                    if self.laman_load == 'True':
                        self.output[f'subjet'][f'herwig_r{r}_N{N_cluster}_edges'].append(np.array(edges_list))
                        self.output[f'subjet'][f'herwig_r{r}_N{N_cluster}_angles'].append(np.array(angles_list))
                    self.output[f'subjet'][f'herwig_r{r}_N{N_cluster}_z'].append(np.array(z_list))
                    self.output[f'subjet'][f'herwig_r{r}_N{N_cluster}_sub_phi'].append(np.array(subjet_phi_list))
                    self.output[f'subjet'][f'herwig_r{r}_N{N_cluster}_sub_rap'].append(np.array(subjet_rap_list))
                    self.output[f'leading_angle'][f'herwig_r{r}_N{N_cluster}'].append(leading_angle)
                    self.output[f'leading_angle_13'][f'herwig_r{r}_N{N_cluster}'].append(leading_angle_13)
                    self.output[f'leading_angle_23'][f'herwig_r{r}_N{N_cluster}'].append(leading_angle_23)
                    self.output[f'leading_angle_14'][f'herwig_r{r}_N{N_cluster}'].append(leading_angle_14)
                    self.output[f'leading_angle_min1323'][f'herwig_r{r}_N{N_cluster}'].append(leading_angle_min1323)
                    self.output[f'leading_angle_max1323'][f'herwig_r{r}_N{N_cluster}'].append(leading_angle_max1323)
                else: 
                    sys.exit(f'Error: Wrong dataset choice.')
                
            
    #---------------------------------------------------------------
    # Analyze jets of a given event.
    #---------------------------------------------------------------

    def fill_qa(self, jet):

        # Fill some jet QA
        self.output['qa']['jet_pt'].append(jet.pt())
        
        # angularity
        alpha = 1
        kappa = 1
        angularity = fjext.lambda_beta_kappa(jet, alpha, kappa, self.R)
        self.output['qa']['jet_angularity'].append(angularity)

        # thrust
        alpha = 2
        kappa = 1
        angularity = fjext.lambda_beta_kappa(jet, alpha, kappa, self.R)
        self.output['qa']['thrust'].append(angularity)

        # LHA
        alpha = 0.5
        kappa = 1
        angularity = fjext.lambda_beta_kappa(jet, alpha, kappa, self.R)
        self.output['qa']['LHA'].append(angularity)

        # pTD
        alpha = 0
        kappa = 2
        angularity = fjext.lambda_beta_kappa(jet, alpha, kappa, self.R)
        self.output['qa']['pTD'].append(angularity)
        
        # mass
        self.output['qa']['jet_mass'].append(jet.m())
        
        # theta_g
        beta = 0
        zcut = 0.2
        gshop = fjcontrib.GroomerShop(jet, self.R, fj.cambridge_algorithm)
        jet_groomed_lund = gshop.soft_drop(beta, zcut, self.R)
        theta_g = jet_groomed_lund.Delta() / self.R
        self.output['qa']['jet_theta_g'].append(theta_g)

        # zg
        zg = jet_groomed_lund.z()
        self.output['qa']['zg'].append(zg)
        
        # multiplicity
        n_constituents = len(jet.constituents())
        self.output['qa']['multiplicity_0000'].append(n_constituents)
        multiplicity_0150 = 0
        multiplicity_0500 = 0
        multiplicity_1000 = 0
        for constituent in jet.constituents():
            if constituent.pt() > 0.15:
                multiplicity_0150 += 1
            if constituent.pt() > 0.5:
                multiplicity_0500 += 1
            if constituent.pt() > 1.:
                multiplicity_1000 += 1
        self.output['qa']['multiplicity_0150'].append(multiplicity_0150)
        self.output['qa']['multiplicity_0500'].append(multiplicity_0500)
        self.output['qa']['multiplicity_1000'].append(multiplicity_1000)
        
    #---------------------------------------------------------------
    # Transform dictionary of lists into a dictionary of numpy arrays
    #---------------------------------------------------------------
    def transform_to_numpy(self, jet_variables_list):

        jet_variables_numpy = {}
        for key,val in jet_variables_list.items():
            jet_variables_numpy[key] = np.array(val)
        
        return jet_variables_numpy

    #---------------------------------------------------------------
    # Plot QA
    #---------------------------------------------------------------

    def plot_QA(self):
        

        # Enable Latex
        plt.rcParams['text.usetex'] = True
        plt.rc('font', family='serif',size=16)

        # Personal Plots
        figures_dir = os.path.join(self.output_dir, 'figures')
        os.makedirs(figures_dir, exist_ok=True)

        # qvsg, inc, pt=500
        
        x =  np.array([0.001, 0.003, 0.005, 0.007, 0.01, 0.015, 0.02, 0.03, 0.05, 0.075, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4])
        y1 = np.array([0.8912 , 0.8905, 0.8911 , 0.8900, 0.8908, 0.8865, 0.8811, 0.8717, 0.8550, 0.8378, 0.8207, 0.7909, 0.7629, 0.7327, 0.6984, 0.6506, 0.5])

        dy1 = np.array([0.0005,	0.0008,	0.0002,	0.0009,	0.0009,	0.0011, 0.0008,	0.0012, 0.0004,	0.0011, 0.0009, 0.0012, 0.0013, 0.0004, 0.0018, 0.0014, 0.])

        labels = ['PFN', ".003", ".005", "", 0.01, "", ".02", "", ".05", "", 0.1, "", ".2", "", ".3", "", 0.4]

        fig, ax1 = plt.subplots(1,1, sharex=True )

        plt.title(r" q vs. g", fontsize=24)

        ax1.errorbar(x, y1, yerr=dy1 , marker='o', linewidth = 1.25, capsize = 5)
        ax1.set_xscale('log')
        #ax1.tick_params(labelright=True)
        ax1.set_ylabel(r"AUC", fontsize = 22)
        ax1.set_ylim([0.5,1.0])
        ax1.set_yticks(np.arange(0.5, 1.0, 0.1))
        ax1.set_xlim([0.001,0.4])
        ax1.set_xlabel(r"$r$",fontsize = 24)

        ax1.legend(loc='center left', title =  r"Pythia8, " r"$\sqrt{s}$" "=14 TeV, " "\n" r"R=0.4, " r"$p_T \in$" "[500,550] GeV"  , title_fontsize=18, fontsize= 14, frameon = True, shadow = True, edgecolor = 'black')

        ax1.set_xticks(x, labels,)

        ax1.grid()
        plt.tight_layout()
        plt.savefig(os.path.join(figures_dir, f'qvsg_AUC_inc_pt500.pdf'))
        
        plt.close()

        # qvsg, exc, pt=500

        plt.rc('font', family='serif',size=24)

        x =  np.array([140, 100, 80, 60, 50, 40, 30, 20, 10, 8, 6, 4, 3, 2, 1])
        y1 = np.array([0.8106, 0.8114, 0.8091, 0.8091, 0.8104, 0.8103, 0.8087, 0.8057, 0.7995, 0.7958, 0.7922, 0.7768, 0.7559, 0.7024, 0.5])
        y2 = np.array([0.8916, 0.8896, 0.8896, 0.8896, 0.8893, 0.8885, 0.8870, 0.8837, 0.8715, 0.8639, 0.8533, 0.8269, 0.7976, 0.7313, 0.5])
        diff = y2-y1

        dy1 = np.array([0.0014, 0.0017, 0.0022, 0.0020, 0.0007, 0.0013, 0.0016, 0.0006, 0.0012, 0.0013, 0.0003, 0.0010, 0.0015, 0.0016, 0.])
        dy2 = np.array([0.0007, 0.0009, 0.0014, 0.0004, 0.0016,	0.0007,	0.0015,	0.0007, 0.0005, 0.0011,	0.0005,	0.0010,	0.0017, 0.0031, 0.])
        ddiff = np.sqrt(dy1**2+dy2**2)

        labels = ['PFN', "", "", 60, "", 40, "", 20, 10, 8, 6, 4, 3, 2, 1]

        fig, (ax1, ax2) = plt.subplots(2,1, sharex=True, gridspec_kw={'height_ratios': [2,1]},  figsize=(10, 8))

        fig.suptitle(r" q vs. g", fontsize=32, y=0.93)

        plt.subplots_adjust( hspace=0.05)

        ax1.errorbar(x, y2, yerr=dy2 , marker='.', capsize = 5, label='Pythia')
        ax1.errorbar(x, y1, yerr=dy1 , marker='.', capsize = 5, label='Herwig')
        ax1.set_xscale('log')
        #ax1.tick_params(labelright=True)
        ax1.set_ylabel(r"AUC", fontsize = 29)
        ax1.set_ylim([0.5,1])
        ax1.set_yticks(np.arange(0.5, 1, 0.1))
        ax1.set_xlim([145, 1])

        ax1.legend(loc='lower left', title =  r"Pythia8, " r"$\sqrt{s}$" "=14 TeV, " "\n" r"R=0.4, " r"$p_T \in$" " [500,550] GeV"  , title_fontsize=24, fontsize= 24, frameon = True, shadow = True, edgecolor = 'black')

        ax1.set_xticks(x, labels,)
        ax1.grid()

        ax2.errorbar(x, diff, ddiff, marker='.', capsize = 4,  color='black',label='Difference')
        ax2.set_xscale('log')
        ax2.legend(loc="lower left", fontsize = 26, shadow = True, edgecolor = 'black')
        #ax2.tick_params(labelright=True)
        ax2.set_xticks(x, labels,)
        #ax2.set_ylabel(r"AUC Difference ", fontname="serif",fontsize = 20)
        ax2.set_xlabel(r"$N$", fontname="serif",fontsize = 29)
        ax2.set_xlim([145, 1])
        ax2.grid()
        plt.rcParams["axes.grid"] = True
        #plt.tight_layout() 
        plt.savefig(os.path.join(figures_dir, f'AUC_qvsg_exc_pt500.pdf'))
        plt.close()


        # qvsg, exc, pt=500, a curves

        x =  np.array([140, 100, 80, 60, 50, 40, 30, 20, 10, 8, 6, 4, 3, 2, 1])
        y1 = np.array([0.8106, 0.8104, 0.8091, 0.8091, 0.8104, 0.8103, 0.8087, 0.8057, 0.7995, 0.7958, 0.7922, 0.7768, 0.7559, 0.7024, 0.5])
        y2 = np.array([0.8916, 0.8896, 0.8896, 0.8896, 0.8893, 0.8885, 0.8870, 0.8837, 0.8715, 0.8639, 0.8533, 0.8269, 0.7976, 0.7313, 0.5])

        dy1 = np.array([0.0014, 0.0017, 0.0022, 0.0020, 0.0007, 0.0013, 0.0016, 0.0006, 0.0012, 0.0013, 0.0003, 0.0010, 0.0015, 0.0016, 0.])
        dy2 = np.array([0.0007, 0.0009, 0.0014, 0.0004, 0.0016,	0.0007,	0.0015,	0.0007, 0.0005, 0.0011,	0.0005,	0.0010,	0.0017, 0.0031, 0.])
        
        diff = y2-y1
        ddiff = np.sqrt(dy1**2+dy2**2)

        diffa2 = y2-2*(y2-y1)
        ddiffa2 = np.sqrt((1-2)**2*dy2**2 + 2**2*dy1**2)
        
        diffa4 = y2-4*(y2-y1)
        ddiffa4 = np.sqrt((1-4)**2*dy2**2 + 4**2*dy1**2)
        

        labels = ['PFN', "" , "", 60, "", 40, "", 20, 10, "", 6, 4, 3, 2, 1]

        fig, (ax1, ax3, ax5) = plt.subplots(3,1, sharex=True, gridspec_kw={'height_ratios': [1.5, 1, 1]}, figsize=(10, 8))

        fig.suptitle(r" q vs. g", fontsize=32, y=0.93)

        plt.subplots_adjust(hspace=0.05)

        ax1.errorbar(x, y2, yerr=dy2 , marker='.', capsize = 4, label='Pythia')
        ax1.errorbar(x, y1, yerr=dy1 , marker='.', capsize = 4, label='Herwig')
        ax1.set_xscale('log')
        #ax1.tick_params(labelright=True)
        ax1.set_ylabel(r"$AUC$", fontname="serif",fontsize = 26)
        ax1.set_ylim([0.5,1])
        ax1.set_yticks(np.arange(0.5, 1, 0.1))
        ax1.set_xlim([0.001,0.4])
        ax1.legend(loc="lower left", title_fontsize=11, fontsize= 22, shadow = True, edgecolor = 'black')
        ax1.set_xticks(x, labels,)
        ax1.grid(b=True)
        #plt.grid()

        ax3.errorbar(x, diffa2, yerr = ddiffa2, marker='.',  capsize = 4, color='C3', label='a=2')
        ax3.set_xscale('log')
        ax3.legend(loc="lower left", fontsize = 22, shadow = True, edgecolor = 'black')
        #ax3.tick_params(labelright=True)
        ax3.set_xticks(x, labels)
        ax3.set_xlim([145, 1])
        yaxis = r"$f(a, N)$"
        ax3.grid(b=True)

        #plt.grid()

        ax5.errorbar(x, diffa4, yerr = ddiffa4, marker='.',  capsize = 4, color='C7',label='a=4')
        ax5.set_xscale('log')
        ax5.legend(loc="lower left", fontsize = 22, shadow = True, edgecolor = 'black')
        #ax5.tick_params(labelright=True)
        ax5.set_xticks(x, labels,)

        ax5.set_ylabel(yaxis, x=0.5, y=1 ,fontname="serif", fontsize = 26)
        ax5.set_xlabel(r"$N$", fontname="serif",fontsize = 29)
        ax5.set_xlim([145, 1])
        ax5.grid(b=True)
        #plt.grid()
        #plt.rcParams["axes.grid"] = True
        #plt.tight_layout()

        plt.savefig(os.path.join(figures_dir, f'AUC_qvsg_exc_pt500_acurves.pdf'))
        plt.close()

        # qvsg, inc, pt=300 vs 500 vs 1000, 250k jets

        plt.rc('font', family='serif',size=16)

        x =  np.array([0.001, 0.005, 0.007, 0.01, 0.015, 0.02, 0.025, 0.03, 0.05, 0.07, 0.1, 0.2, 0.3, 0.4])
        y1 = np.array([0.8750,	0.8761,	0.8757,	0.8766,	0.8765,	0.8733,	0.8709,	0.8681,	0.8556,	0.8427, 0.8256,	0.7722,	0.7067, 0.50])
        y2 = np.array([0.8822,	0.8823,	0.8831,	0.8828,	0.8804,	0.8760,	0.8731,	0.8687,	0.8552,	0.8404,	0.8218,	0.7736,	0.7143, 0.5])
        y3 = np.array([0.8891,	0.8897,	0.8885,	0.8849,	0.8801,	0.8777,	0.8714,	0.8674,	0.8532,	0.8410,	0.8238,	0.7737,	0.7167,	0.5])
        diff = y2-y1

        dy1 = np.array([0.0016,	0.0020,	0.0026,	0.0012,	0.0024,	0.0016,	0.0027,	0.0015,	0.0013,	0.0014,	0.0015,	0.0016,	0.0017, 0.])
        dy2 = np.array([0.0029,	0.0019,	0.0018,	0.0020,	0.0015,	0.0027,	0.0014,	0.0017,	0.0015,	0.0023,	0.0023,	0.0028,	0.0025,	0.])
        dy3 = np.array([0.0030,	0.0025,	0.0020,	0.0007,	0.0016,	0.0016,	0.0029,	0.0022,	0.0024,	0.0014,	0.0024,	0.0021,	0.0018,	0.])
        ddiff = np.sqrt(dy1**2+dy2**2)

        labels = ['PFN', 0.005, "", 0.01, "", ".02", "",  ".03", ".05", "", 0.1, 0.2, "", 0.4]

        fig, ax1 = plt.subplots(1,1, sharex=True )

        plt.title(r" q vs. g", fontsize=20)

        ax1.errorbar(x, y3, yerr=dy2 , marker='.', capsize = 4,  linewidth=1, color='tab:blue', label=r"$p_T \in$" " [1000,1050]  GeV")
        ax1.errorbar(x, y2, yerr=dy2 , marker='.', capsize = 4,  linewidth=1, color='tab:orange', label=r"$p_T \in$" " [500,550]  GeV")
        ax1.errorbar(x, y1, yerr=dy1 , marker='.', capsize = 4,  linewidth=1, color='k', label=r"$p_T \in$" " [300,350]  GeV")

        ax1.set_xscale('log')
        #ax1.tick_params(labelright=True)
        ax1.set_ylabel(r"AUC", fontsize = 22)
        ax1.set_ylim([0.5, 1])
        ax1.set_yticks(np.arange(0.5, 1.0, 0.1))
        ax1.set_xlim([0.001,0.4])

        ax1.legend(loc='lower left', title = r"Pythia8, " r"$\sqrt{s}$" "=14 TeV, " "\n" r"R=0.4"   , title_fontsize=17, fontsize= 16, frameon = True, shadow = True, edgecolor = 'black')

        ax1.set_xticks(x, labels,)
        ax1.set_xlabel(r"$r$", fontname="serif",fontsize = 26)

        ax1.grid(b=True)
        plt.tight_layout()
        plt.savefig(os.path.join(figures_dir, f'qvsg_AUC_inc_pt300vs500vs1000.pdf'))
        plt.close()




        # qvsg, inc, pt=300 vs 500 vs 1000, 500k jets

        plt.rc('font', family='serif',size=24)

        # adjust coordinates
        x =  np.array([0.001, 0.005, 0.007, 0.01, 0.015, 0.02, 0.025, 0.03, 0.05, 0.07, 0.1, 0.2, 0.3, 0.4])
        y1 = np.array([0.8789, 0.8788, 0.8785, 0.8788, 0.8780, 0.8767, 0.8748, 0.8699, 0.8588, 0.845, 0.8262, 0.7710, 0.7086, 0.50])
        y2 = np.array([0.8864, 0.8863, 0.8866, 0.8868, 0.8845, 0.8799, 0.8757, 0.8727, 0.8578, 0.8435, 0.8248, 0.7701, 0.7107, 0.5])
        y3 = np.array([0.8946, 0.8937, 0.8939, 0.8894, 0.8848, 0.8807, 0.8767, 0.8704, 0.8552, 0.8429, 0.8268, 0.7752, 0.7172, 0.5])

        diff21 = y2-y1
        diff32 = y3-y1

        y1_inv = 1/(1-y1)
        y2_inv = 1/(1-y2)
        y3_inv = 1/(1-y3)

        dy1 = np.array([0.0009, 0.0008, 0.0013, 0.0009, 0.0026, 0.0012, 0.0011, 0.0009, 0.0013, 0.0004, 0.0023, 0.0009, 0.0025, 0.])
        dy2 = np.array([0.0019, 0.0008, 0.0021, 0.0019, 0.0003, 0.0008, 0.0010, 0.0007, 0.0014, 0.0018, 0.0013, 0.0026, 0.0015,	0.])
        dy3 = np.array([0.0014, 0.0007, 0.0011, 0.0016, 0.0014, 0.0016, 0.0008, 0.0011, 0.0007, 0.0016, 0.0023, 0.0021, 0.0028,	0.])
        ddiff = np.sqrt(dy1**2+dy2**2)

        dy1_inv = dy1 * 1/(1-y1)**2
        dy2_inv = dy2 * 1/(1-y2)**2
        dy3_inv = dy3 * 1/(1-y3)**2
        labels = ['PFN', 0.005, "", 0.01, "", ".02", "",  ".03", ".05", "", 0.1, 0.2, "", 0.4]

        fig, (ax1, ax2) = plt.subplots(2,1, sharex=True, gridspec_kw={'height_ratios': [2, 1.2]}, figsize=(10, 8))

        fig.suptitle(r" q vs. g", fontsize=36, y=0.94)

        plt.subplots_adjust(hspace=0.05)

        ax1.errorbar(x, y3, yerr=dy3 , marker='.', capsize = 4,  linewidth=1.5, color='tab:blue', label=r"$p_T \in$" " [1000,1050]  GeV")
        ax1.errorbar(x, y2, yerr=dy2 , marker='.', capsize = 4,  linewidth=1.5, color='tab:orange', label=r"$p_T \in$" " [500,550]  GeV")
        ax1.errorbar(x, y1, yerr=dy1 , marker='.', capsize = 4,  linewidth=1.5, color='k', label=r"$p_T \in$" " [300,350]  GeV")

        ax1.set_xscale('log')
        #ax1.tick_params(labelright=True)
        ax1.set_ylabel(r"AUC", fontsize = 30)
        ax1.set_ylim([0.5, 1])
        ax1.set_yticks(np.arange(0.5, 1.0, 0.1))
        ax1.set_xlim([0.001,0.4])
        ax1.legend(loc='best', title = r"Pythia8, " r"$\sqrt{s}$" "=14 TeV, " "\n" r"R=0.4 "   , title_fontsize=26, fontsize= 24, frameon = True, shadow = True, edgecolor = 'black')
        ax1.set_xticks(x, labels,)
        ax1.grid(b=True)


        ax2.errorbar(x, y3, yerr=dy3 , marker='.', capsize = 4,  linewidth=2, color='tab:blue', label=r"$p_T \in$" " [1000,1050]  GeV")
        ax2.errorbar(x, y2, yerr=dy2 , marker='.', capsize = 4,  linewidth=2, color='tab:orange', label=r"$p_T \in$" " [500,550]  GeV")
        ax2.errorbar(x, y1, yerr=dy1 , marker='.', capsize = 4,  linewidth=2, color='k', label=r"$p_T \in$" " [300,350]  GeV")

        ax2.axhline(y1[0], linestyle='dashed', linewidth=1.5, color='k')
        ax2.axhline(y2[0], linestyle='dashed', linewidth=1.5, color='tab:orange')
        ax2.axhline(y3[0], linestyle='dashed', linewidth=1.5, color='tab:blue')

        ax2.set_ylim([0.825, 0.898])

        ax2.set_xticks(x, labels,)
        ax2.grid()
        ax2.set_ylabel(r"AUC", fontsize = 30)
        #yaxis = r"$f(a, N)$"
        ax2.grid(b=True)
        ax2.set_xlabel(r"$r$", fontname="serif",fontsize = 32)

        plt.savefig(os.path.join(figures_dir, f'qvsg_AUC_inc_pt300vs500vs1000_500k.pdf'))
        plt.close()




        # qvsg, inc, pt= 300vs500vs1000, multiplicity 

        plt.rc('font', family='serif',size=23)

        # adjust coordinates
        x =  np.array([0.0005, 0.0007, 0.001, 0.002, 0.003, 0.004, 0.005, 0.007, 0.01, 0.015, 0.02, 0.025, 0.03, 0.04, 0.05, 0.07, 0.1, 0.15, 0.2, 0.3, 0.4])
        y1_q = np.array([29.06, 29.04, 29, 28.76, 28.4, 27.96, 27.5, 26.5, 25, 22.8, 21, 19.5, 18.2, 16, 14.2, 11.6, 8.9, 6.1, 4.5, 3.01, 1])
        y2_q = np.array([33.54, 33.49, 33.41, 32.88, 32.15, 31.36, 30.57, 29.04, 27.05, 24.36, 22.25, 20.5, 19, 16.6, 14.8, 11.9, 9.1, 6.3, 4.6, 3.06, 1])
        y3_q = np.array([42.45, 42.28, 42.06, 40.65, 39.12, 37.7, 36.4, 34.1, 31.3, 27.77, 25.03, 22.86, 21.04, 18.13, 15.9, 12.6, 9.5, 6.4, 4.7, 3.08, 1])

        y1_g = np.array([44.36, 44.34, 44.3, 44.11, 43.78, 43.36, 42.9, 41.7, 39.7, 36.4, 33.4, 30.8, 28.5, 24.6, 21.4, 16.8, 12.2, 7.9, 5.5, 3.63, 1])
        y2_g = np.array([54.18, 54.14, 54.06, 53.6, 52.88, 52, 51.02, 48.92, 45.8, 41.18, 37.26, 34, 31.1, 26.5, 22.9, 17.7, 12.7, 8.1, 5.7, 3.71, 1])
        y3_g = np.array([69.38, 69.25, 68.99, 67.57, 65.71, 63.7, 61.8, 58.1, 53.26, 46.74, 41.63, 37.48, 34.04, 28.56, 24.4, 18.6, 13.2, 8.3,  5.8, 3.78, 1])

        ratio1 = y1_g/y1_q
        ratio2 = y2_g/y2_q
        ratio3 = y3_g/y3_q

        labels = np.array([".0005", "", 0.001, ".002", "", "", ".005", "", 0.01, "", ".02", "", ".03", "", ".05", "", 0.1, "", ".2", ".3", 0.4])        
        
        fig, (ax1, ax2) = plt.subplots(2,1, sharex=True, gridspec_kw={'height_ratios': [2, 0.7]}, figsize=(10, 8))

        fig.suptitle(r" q[solid] vs. g[dashed]", fontsize=36, y=0.94)

        plt.subplots_adjust(hspace=0.03)

        ax1.plot(x, y3_q, marker='.', linewidth=1.25, color='tab:blue', label=r"$p_T \in$" " [1000,1050]  GeV")
        ax1.plot(x, y2_q, marker='.', linewidth=1.25, color='tab:orange', label=r"$p_T \in$" " [500,550]  GeV")
        ax1.plot(x, y1_q, marker='.', linewidth=1.25, color='k', label=r"$p_T \in$" " [300,350]  GeV")

        ax1.plot(x, y3_g, marker='.',  linestyle='dashed',  linewidth=1.25, color='tab:blue')
        ax1.plot(x, y2_g, marker='.',  linestyle='dashed',  linewidth=1.25, color='tab:orange')
        ax1.plot(x, y1_g , marker='.',  linestyle='dashed',  linewidth=1.25, color='k')

        #ax1.axhline(y=y3_g[0], linestyle='dashed', color='tab:blue')
        #ax1.axhline(y=y2_g[0], linestyle='dashed', color='tab:orange')
        #ax1.axhline(y=y1_g[0], linestyle='dashed', color='k')

        ax1.set_xscale('log')
        #ax1.tick_params(labelright=True)
        ax1.set_ylabel(r"subjet multiplicity " r"$n_{q,g}$", fontsize = 32)
        ax1.set_ylim([1, 110])
        ax1.set_xlim([0.0005, 0.4])
        ax1.legend(loc='best', title = r"Pythia8, " r"$\sqrt{s}$" "=14 TeV, " "\n" r"R=0.4 ", title_fontsize=23, fontsize= 23, frameon = True, shadow = True, edgecolor = 'black')
        ax1.set_xticks(x, labels,)
        ax1.grid(b=True)


        ax2.plot(x, ratio3, marker='.',  linewidth=1, color='tab:blue')
        ax2.plot(x, ratio2, marker='.',  linewidth=1, color='tab:orange')
        ax2.plot(x, ratio1, marker='.',  linewidth=1, color='k')
        ax2.set_ylabel(r"$n_g/n_q$", fontsize = 32)        
        ax2.set_ylim([1.4, 1.725])
        ax2.set_xlim([0.0005, 0.4])
        ax2.grid(b=True)
        ax2.set_xlabel(r"$r$", fontname="serif",fontsize = 32)

        plt.savefig(os.path.join(figures_dir, f'qvsg_multiplicity_pt300vs500vs1000.pdf'))
        plt.close()




        # ZvsQCD, inc, pt=300vs500vs1000, m=[75,105]

        # adjust coordinates
        x =  np.array([0.001, 0.01, 0.05, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.8])
        y1 = np.array([0.9165,	0.9185,	0.9192,	0.9196,	0.9179,	0.9147,	0.9149,	0.9122,	0.9077,	0.9049,	0.9021,	0.8960,	0.8931,	0.8870,	0.8773,	0.8613,	0.8372,	0.8088, 0.7686, 0.5000])
        y2 = np.array([0.9410,	0.9410,	0.9416,	0.9413,	0.9400,	0.9388,	0.9392,	0.9386,	0.9353,	0.9306,	0.9240,	0.9072,	0.8914,	0.8769,	0.8621,	0.8482,	0.8305,	0.8099,	0.7818, 0.5000])
        y3 = np.array([0.9647,	0.9653,	0.9656,	0.9649,	0.9627,	0.9575,	0.9502,	0.9454,	0.9414,	0.9399,	0.9334,	0.9260,	0.9173,	0.9085,	0.8962,	0.8810,	0.8661,	0.8416,	0.8063,	0.5000])

        dy1 = np.array([0.0023,	0.0008,	0.0013,	0.0011,	0.0022,	0.0022,	0.0014,	0.0023,	0.0017,	0.0015,	0.0019,	0.0025,	0.0007,	0.0030,	0.0017,	0.0010,	0.0022,	0.0023,	0.0025,	0.0000])
        dy2 = np.array([0.0027,	0.0014,	0.0016,	0.0017,	0.0014,	0.0024,	0.0009,	0.0013,	0.0023,	0.0024,	0.0009,	0.0021,	0.0019,	0.0013,	0.0016,	0.0011,	0.0018,	0.0019,	0.0023, 0.0000])
        dy3 = np.array([0.0022,	0.0008,	0.0016,	0.0012,	0.0019,	0.0017,	0.0015,	0.0012,	0.0019,	0.0018,	0.0016,	0.0015,	0.0027,	0.0012,	0.0021,	0.0028,	0.0022,	0.0013,	0.0022, 0.0000])
        ddiff = np.sqrt(dy1**2+dy2**2)

        labels = ['PFN', 0.01, 0.05, 0.1, "", "", "", ".2", "", "", ".3", "", ".4", "", ".5","", "", "", "", 0.8]

        fig, ax1 = plt.subplots(1,1, sharex=True )

        plt.title(r" Z vs. QCD", fontsize=20)


        ax1.errorbar(x, y3, yerr=dy3 , marker='.', capsize = 3, linewidth=0.75, linestyle='solid', color = 'tab:blue', label=r"$p_T \in$" " [1000,1100]  GeV")
        ax1.errorbar(x, y2, yerr=dy2 , marker='.', capsize = 3, linewidth=0.75, linestyle='solid', color = 'tab:orange', label=r"$p_T \in$" " [500,550]  GeV")
        ax1.errorbar(x, y1, yerr=dy1 , marker='.', capsize = 3, linewidth=0.75, linestyle='solid', color = 'k', label=r"$p_T \in$" " [300,350]  GeV")
        ax1.set_xscale('log')
        #ax1.tick_params(labelright=True)
        ax1.set_ylabel(r"AUC", fontsize = 22)
        ax1.set_ylim([0.5, 1])
        ax1.set_yticks(np.arange(0.5, 1.0, 0.1))
        ax1.set_xlim([0.001, 0.8])

        ax1.legend(loc='lower left', title =  r"Pythia8, " r"$\sqrt{s}$" "=14  TeV," "\n" r"R=0.8, " r"$m_j \in$"  " [75,105] GeV"  , title_fontsize=17, fontsize= 16, frameon = True, shadow = True, edgecolor = 'black')

        ax1.set_xticks(x, labels,)
        ax1.set_xlabel(r"$r$", fontname="serif",fontsize = 26)

        ax1.grid(b=True)
        fig.tight_layout()
        plt.savefig(os.path.join(figures_dir, f'ZvsQCD_AUC_inc_pt300vs500vs1000_m75105.pdf'))

        plt.close()



        # ZvsQCD, inc, pt=300vs500vs1000, m=[45,135] (500k jets)

        x =  np.array([0.001, 0.01, 0.05, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8])
        y1 = np.array([0.8977, 0.8978, 0.8973, 0.8947, 0.8927, 0.8892, 0.8867, 0.8842, 0.8808, 0.8799, 0.8748, 0.8693, 0.8646, 0.8554, 0.8335, 0.7932, 0.7454, 0.7038, 0.6612, 0.6135, 0.5000])
        y2 = np.array([0.9235, 0.9237, 0.9236, 0.9224, 0.9201, 0.9189, 0.9163, 0.9150, 0.9116, 0.9084, 0.8894, 0.8297, 0.7755, 0.7378, 0.7115, 0.6889, 0.6738, 0.6549, 0.6372, 0.6052, 0.5000])
        y3 = np.array([0.9585, 0.9593, 0.9579, 0.9565, 0.9530, 0.9391, 0.8928, 0.8580, 0.8371, 0.8209, 0.7935, 0.7696, 0.7483, 0.7291, 0.7077, 0.6908, 0.6751, 0.6551, 0.6333, 0.6008, 0.5000])

        dy1 = np.array([0.0014, 0.0004, 0.0007, 0.0017, 0.0015, 0.0019, 0.0009, 0.0012, 0.0019, 0.0021, 0.0017, 0.0020, 0.0005, 0.0014, 0.0021, 0.0008, 0.0005, 0.0010, 0.0020, 0.0029, 0.])
        dy2 = np.array([0.0015, 0.0018, 0.0010, 0.0017, 0.0012, 0.0009, 0.0008, 0.0012, 0.0016, 0.0013, 0.0034, 0.0018, 0.0029, 0.0034, 0.0015, 0.0021, 0.0045, 0.0020, 0.0011, 0.0016, 0.])
        dy3 = np.array([0.0011, 0.0013, 0.0012, 0.0008, 0.0014, 0.0008, 0.0021, 0.0007, 0.0033, 0.0020, 0.0006, 0.0013, 0.0052, 0.0023, 0.0032, 0.0032, 0.0015, 0.0008, 0.0024, 0.0034, 0.])

        labels = ['PFN', 0.01, 0.05, 0.1,  "", "", "", ".2", "", "", ".3", "", ".4", "", "","", ".6", "", "", "", ".8"]

        fig, ax1 = plt.subplots(1,1, sharex=True )

        plt.title(r" Z vs. QCD", fontsize=20)


        ax1.errorbar(x, y3, yerr=dy3 , marker='.', capsize = 3, linewidth=0.75, linestyle='solid', color = 'tab:blue', label=r"$p_T \in$" " [1000,1100]  GeV")
        ax1.errorbar(x, y2, yerr=dy2 , marker='.', capsize = 3, linewidth=0.75, linestyle='solid', color = 'tab:orange', label=r"$p_T \in$" " [500,550]  GeV")
        ax1.errorbar(x, y1, yerr=dy1 , marker='.', capsize = 3, linewidth=0.75, linestyle='solid', color = 'k', label=r"$p_T \in$" " [300,350]  GeV")
        ax1.set_xscale('log')

        ax1.set_ylabel(r"AUC", fontsize = 22)
        ax1.set_ylim([0.5, 1])
        ax1.set_yticks(np.arange(0.5, 1.0, 0.1))
        ax1.set_xlim([0.001, 0.8])

        ax1.legend(loc='lower left', title =  r"Pythia8, " r"$\sqrt{s}$" "=14  TeV," "\n" r"R=0.8, " r"$m_j \in$"  " [45,135] GeV"  , title_fontsize=17, fontsize= 16, frameon = True, shadow = True, edgecolor = 'black')

        ax1.set_xticks(x, labels,)
        ax1.set_xlabel(r"$r$", fontname="serif",fontsize = 26)

        ax1.grid(b=True)
        fig.tight_layout()
        plt.savefig(os.path.join(figures_dir, f'ZvsQCD_AUC_inc_pt300vs500vs1000_m45135.pdf'))

        plt.close()


        # ZvsQCD, inc, pt=500, N=2vs3vsJFN

        x =  np.array([0.01, 0.05, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.8])
        y1 = np.array([0.9416,	0.9413,	0.9413,	0.9400,	0.9388,	0.9392,	0.9386,	0.9353,	0.9306,	0.9240,	0.9072,	0.8914,	0.8769,	0.8621,	0.8482,	0.8305,	0.8099,	0.7818, 0.5])
        y2 = np.array([0.8400,	0.8623,	0.8813,	0.8910,	0.9013,	0.9073,	0.9135,	0.9156,	0.9173,	0.9032,	0.8742,	0.8543,	0.8392,	0.8217,	0.8103,	0.7943,	0.7796,	0.7583, 0.5])
        y3 = np.array([0.8929,	0.9073,	0.9191,	0.9235,	0.9285,	0.9283,	0.9304,	0.9281,	0.9251,	0.9136,	0.8940,	0.8809,	0.8673,	0.8524,	0.8394,	0.8212,	0.8014,	0.7751, 0.5])
        diff = y2-y1

        dy1 = np.array([0.0016,	0.0012,	0.0017,	0.0014,	0.0024,	0.0009,	0.0013,	0.0023,	0.0024,	0.0009,	0.0021,	0.0019,	0.0013,	0.0016,	0.0011,	0.0018,	0.0019,	0.0023, 0.])
        dy2 = np.array([0.0014,	0.0029,	0.0045,	0.0022,	0.0006,	0.0027,	0.0011,	0.0026,	0.0026,	0.0011,	0.0024,	0.0007,	0.0023,	0.0056,	0.0029,	0.0015,	0.0073,	0.0026, 0.])
        dy3 = np.array([0.0020,	0.0037,	0.0015,	0.0013,	0.0011,	0.0018,	0.0033,	0.0017,	0.0027,	0.0026,	0.0030,	0.0027,	0.0016,	0.0035,	0.0025,	0.0038,	0.0029,	0.0037, 0.])
        ddiff = np.sqrt(dy1**2+dy2**2)

        labels = [0.05, 0.07, 0.1, "", ".15", "", ".2", "", "", ".3", "", ".4", "", ".5", "", ".6","", "", 0.8]

        fig, ax1 = plt.subplots(1,1, sharex=True )

        plt.title(r" Z vs. QCD", fontsize=20)


        ax1.errorbar(x, y1, yerr=dy1 , marker='.',  capsize = 4, linewidth = 1.2, label=r'$JFN$')
        ax1.errorbar(x, y3, yerr=dy3 , marker='.',  capsize = 4, linewidth = 1.2, label=r'$N=3$')
        ax1.errorbar(x, y2, yerr=dy2 , marker='.',  capsize = 4, linewidth = 1.2, color='black', label=r'$N=2$')

        ax1.set_xscale('log')
        #ax1.tick_params(labelright=True)
        ax1.set_ylabel(r"AUC", fontname="Ubuntu", fontsize = 22)
        ax1.set_ylim([0.5, 1])
        ax1.set_yticks(np.arange(0.5, 1.0, 0.1))
        ax1.set_xlim([0.05,0.8])

        ax1.legend(loc='lower left', title =  r"$\it{Pythia8}, \ $" r"$\sqrt{s}=14 \ TeV$" "\n" r"$R=0.8, \ m_j \in [75,105]\ GeV $" "\n" r"$p_T \in [500,550]\ GeV $" , title_fontsize=16, fontsize= 15, frameon = True, shadow = True, edgecolor = 'black')

        ax1.set_xticks(x, labels,)
        ax1.set_xlabel(r"$r$", fontname="serif",fontsize = 24)

        ax1.grid(b=True)

        plt.tight_layout()
        plt.savefig(os.path.join(figures_dir, f'AUC_ZvsQCD_inc_pt500_m75105_N2vs3vsJFN.pdf'))

        plt.close()


        # ZvsQCD, inc, pt=1000, m=[75,105], N=2vs3vsJFN
        
        x =  np.array([0.01, 0.05, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.7, 0.8])
        y1 = np.array([0.9653,  0.9656,	0.9649,	0.9627,	0.9575,	0.9502,	0.9454,	0.9414,	0.9399,	0.9334,	0.9260,	0.9173,	0.9085,	0.8962,	0.8810,	0.8661,	0.8063, 0.5])
        y2 = np.array([0.7799,	0.9059,	0.9399,	0.9469,	0.9306,	0.8963,	0.8787,	0.8759,	0.8774,	0.8810,	0.8801,	0.8783,	0.8707,	0.8576,	0.8439,	0.8308,	0.7831, 0.5])
        y3 = np.array([0.8356,	0.9379,	0.9555,	0.9562,	0.9450,	0.9256,	0.9190,	0.9160,	0.9171,	0.9161,	0.9107,	0.9094,	0.8997,	0.8856,	0.8742,	0.8580,	0.8052, 0.5])

        dy1 = np.array([0.0008, 0.0016,	0.0012,	0.0019,	0.0017,	0.0015,	0.0012,	0.0019,	0.0018,	0.0016,	0.0015,	0.0027,	0.0012,	0.0021,	0.0028,	0.0022,	0.0022, 0.])
        dy2 = np.array([0.0033,	0.0021,	0.0016,	0.0017,	0.0015,	0.0017,	0.0016,	0.0035,	0.0018,	0.0030,	0.0041,	0.0031,	0.0029,	0.0048,	0.0019,	0.0055,	0.0034, 0.])
        dy3 = np.array([0.0029,	0.0010,	0.0010,	0.0014,	0.0016,	0.0015,	0.0010,	0.0017,	0.0026,	0.0024,	0.0038,	0.0015,	0.0016,	0.0048,	0.0016,	0.0025,	0.0021, 0.])

        labels = [0.01, 0.05, 0.1, "", ".15", "", ".2", "", "", ".3", "", ".4", "", ".5", "", ".6","", 0.8]


        fig, ax1 = plt.subplots(1,1, sharex=True )

        plt.title(r" Z vs. QCD", fontsize=20)


        ax1.errorbar(x, y1, yerr=dy1 , marker='.', capsize = 4, linewidth = 1.2, label=r'$JFN$')
        ax1.errorbar(x, y3, yerr=dy3 , marker='.', capsize = 4, linewidth = 1.2, label=r'$N=3$')
        ax1.errorbar(x, y2, yerr=dy2 , marker='.', capsize = 4, linewidth = 1.2, color='black', label=r'$N=2$')

        ax1.set_xscale('log')
        #ax1.tick_params(labelright=True)
        ax1.set_ylabel(r"AUC", fontname="Ubuntu", fontsize = 22)
        ax1.set_ylim([0.5, 1])
        #ax3=ax1.secondary_xaxis("top")
        #ax3.set_xticks(x, njet)
        #ax3.set_xlabel(r"$<n_{subjets}>$", fontsize=12)
        ax1.set_yticks(np.arange(0.5, 1.0, 0.1))
        ax1.set_xlim([0.01,0.8])

        ax1.legend(loc='lower left', title =  r"$\it{Pythia8}, \ $" r"$\sqrt{s}=14 \ TeV$" "\n" r"$R=0.8, \ m_j \in [75,105]\ GeV $" "\n" r"$p_T \in [1000,1100]\ GeV $" , title_fontsize=17, fontsize= 16, frameon = True, shadow = True, edgecolor = 'black')

        ax1.set_xticks(x, labels,)
        ax1.set_xlabel(r"$r$", fontname="serif",fontsize = 24)
        ax1.grid(b=True)
        plt.tight_layout()
        plt.savefig(os.path.join(figures_dir, f'AUC_ZvsQCD_inc_pt1000_m75105_N2vs3vsJFN.pdf'))
        plt.close()

       
        # ZvsQCD, inc, pt=1000, m=[45,135], N=2vs3vsJFN (500k jets)
        
        x =  np.array([0.01, 0.05, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8])
        y1 = np.array([0.9515, 0.9516, 0.9504, 0.9479, 0.9342, 0.8831, 0.8489, 0.8260, 0.8108, 0.7848, 0.7593, 0.7392, 0.7260, 0.6987, 0.6865, 0.6707, 0.6539, 0.6314, 0.5834, 0.5000])
        y2 = np.array([0.7719, 0.8915, 0.9224, 0.9261, 0.9124, 0.8415, 0.7969, 0.7802, 0.7691, 0.7493, 0.7319, 0.7166, 0.7049, 0.6936, 0.6783, 0.6617, 0.6427, 0.6257, 0.5599, 0.5])
        y3 = np.array([0.8296, 0.9225, 0.9396, 0.9392, 0.9240, 0.8687, 0.8336, 0.8073, 0.7968, 0.7649, 0.7533, 0.7370, 0.7175, 0.7014, 0.6821, 0.6699, 0.6539, 0.6349, 0.5869, 0.5])

        dy1 = np.array([0.0012, 0.0007, 0.0016, 0.0007, 0.0011, 0.0007, 0.0020, 0.0017, 0.0021, 0.0012, 0.0042, 0.0007, 0.0017, 0.0015, 0.0008, 0.0020, 0.0015, 0.0009, 0.0004, 0.])
        dy2 = np.array([0.0019, 0.0008, 0.0008, 0.0002, 0.0004, 0.0015, 0.0014, 0.0020, 0.0012, 0.0007, 0.0014, 0.0011, 0.0006, 0.0020, 0.0007, 0.0022, 0.0028, 0.0025, 0.0029, 0.])
        dy3 = np.array([0.0002, 0.0009, 0.0003, 0.0006, 0.0006, 0.0014, 0.0024, 0.0018, 0.0013, 0.0015, 0.0028, 0.0030, 0.0011, 0.0036, 0.0016, 0.0015, 0.0024, 0.0018, 0.0099, 0.])

        labels = [0.01, 0.05, 0.1, "", "", "", ".2", "", "",  ".3", "", ".4", "", ".5", "", ".6","", "", "", 0.8]

        fig, ax1 = plt.subplots(1,1, sharex=True )

        plt.title(r" Z vs. QCD", fontsize=20)


        ax1.errorbar(x, y1, yerr=dy1 , marker='.', capsize = 4, linewidth = 1.2, label=r'$JFN$')
        ax1.errorbar(x, y3, yerr=dy3 , marker='.', capsize = 4, linewidth = 1.2, label=r'$N=3$')
        ax1.errorbar(x, y2, yerr=dy2 , marker='.', capsize = 4, linewidth = 1.2, color='black', label=r'$N=2$')

        ax1.set_xscale('log')
        #ax1.tick_params(labelright=True)
        ax1.set_ylabel(r"AUC", fontname="Ubuntu", fontsize = 22)
        ax1.set_ylim([0.5, 1])
        ax1.set_yticks(np.arange(0.5, 1.0, 0.1))
        ax1.set_xlim([0.01,0.8])

        ax1.legend(loc='lower left', title =  r"$\it{Pythia8}, \ $" r"$\sqrt{s}=14 \ TeV$" "\n" r"$R=0.8, \ m_j \in [45,135]\ GeV $" "\n" r"$p_T \in [1000,1100]\ GeV $" , title_fontsize=15, fontsize= 15, frameon = True, shadow = True, edgecolor = 'black')

        ax1.set_xticks(x, labels,)
        ax1.set_xlabel(r"$r$", fontname="serif",fontsize = 24)
        ax1.grid(b=True)
        plt.tight_layout()
        plt.savefig(os.path.join(figures_dir, f'AUC_ZvsQCD_inc_pt1000_m45135_N2vs3vsJFN.pdf'))
        plt.close()


        # ZvsQCD, inc, pt=500, m=[45,135], N=2vs3vsJFN (500k jets)
        
        x =  np.array([0.01, 0.05, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.8])
        y1 = np.array([0.9237, 0.9236, 0.9224, 0.9201, 0.9189, 0.9163, 0.9150, 0.9116, 0.9084, 0.8894, 0.8297, 0.7755, 0.7378, 0.7115, 0.6889, 0.6738, 0.6549, 0.6372, 0.5000])
        y2 = np.array([0.7500, 0.8656, 0.8879, 0.8923, 0.8938, 0.8969, 0.8980, 0.8968, 0.8948, 0.8795, 0.8162, 0.7627, 0.7311, 0.7049, 0.6851, 0.6708, 0.6515, 0.6353, 0.5000])
        y3 = np.array([0.6789, 0.8203, 0.8564, 0.8628, 0.8703, 0.8737, 0.8775, 0.8808, 0.8773, 0.8658, 0.7948, 0.7339, 0.7032, 0.6785, 0.6623, 0.6475, 0.6339, 0.6215, 0.5000])

        dy1 = np.array([0.0018, 0.0010, 0.0017, 0.0012, 0.0009, 0.0008, 0.0012, 0.0016, 0.0013, 0.0034, 0.0018, 0.0029, 0.0034, 0.0015, 0.0021, 0.0045, 0.0020, 0.0011, 0.])
        dy2 = np.array([0.0013, 0.0013, 0.0010, 0.0006, 0.0004, 0.0012, 0.0012, 0.0010, 0.0021, 0.0007, 0.0016, 0.0008, 0.0025, 0.0015, 0.0016, 0.0009, 0.0018, 0.0024, 0.])
        dy3 = np.array([0.0029, 0.0012, 0.0012, 0.0008, 0.0014, 0.0018, 0.0013, 0.0017, 0.0010, 0.0015, 0.0009, 0.0015, 0.0014, 0.0011, 0.0038, 0.0014, 0.0013, 0.0010, 0.])

        labels = [0.01, 0.05, 0.1, "", "", "", ".2", "", "",  ".3", "", ".4", "", ".5", "", ".6","", "",  0.8]

        fig, ax1 = plt.subplots(1,1, sharex=True )

        plt.title(r" Z vs. QCD", fontsize=20)

        ax1.errorbar(x, y1, yerr=dy1 , marker='.', capsize = 4, linewidth = 1.2, label=r'$JFN$')
        ax1.errorbar(x, y2, yerr=dy2 , marker='.', capsize = 4, linewidth = 1.2, label=r'$N=3$')
        ax1.errorbar(x, y3, yerr=dy3 , marker='.', capsize = 4, linewidth = 1.2, color='black', label=r'$N=2$')

        ax1.set_xscale('log')
        #ax1.tick_params(labelright=True)
        ax1.set_ylabel(r"AUC", fontname="Ubuntu", fontsize = 22)
        ax1.set_ylim([0.5, 1])
        ax1.set_yticks(np.arange(0.5, 1.0, 0.1))
        ax1.set_xlim([0.01,0.8])

        ax1.legend(loc='lower left', title =  r"$\it{Pythia8}, \ $" r"$\sqrt{s}=14 \ TeV$" "\n" r"$R=0.8, \ m_j \in [45,135]\ GeV $" "\n" r"$p_T \in [500,550]\ GeV $" , title_fontsize=13, fontsize= 13, frameon = True, shadow = True, edgecolor = 'black')

        ax1.set_xticks(x, labels,)
        ax1.set_xlabel(r"$r$", fontname="serif",fontsize = 24)
        ax1.grid(b=True)
        plt.tight_layout()
        plt.savefig(os.path.join(figures_dir, f'AUC_ZvsQCD_inc_pt500_m45135_N2vs3vsJFN.pdf'))
        plt.close()

        # ZvsQCD, inc, pt=500, m=[75,105]

        x =  np.array([0.001, 0.01, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.8])

        y2 = np.array([0.9421,	0.9440,	0.9435,	0.9422,	0.9411,	0.9377,	0.9316,	0.9219,	0.9048,	0.8883,	0.8752,	0.8596,	0.8363,	0.8148,	0.7816, 0.7227, 0.5000])

        dy2 = np.array([0.0001,	0.0005,	0.0011,	0.0036,	0.0016,	0.0029,	0.0016,	0.0007,	0.0013,	0.0035,	0.0036,	0.0024,	0.0006,	0.0032,	0.0029, 0.0025,	0.0000])

        njet = np.array([0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0, 1])

        labels = ['PFN', 0.01, 0.05, 0.1, "", ".2", "", ".3", "", ".4", "", ".5", "" ,"", "", "", 0.8]

        fig, ax1 = plt.subplots(1,1, sharex=True )


        plt.title(r" Z vs. QCD", fontsize=20)


        ax1.errorbar(x, y2, yerr=dy2 , marker='o', capsize = 6, linestyle='solid',  linewidth=1.5, color='tab:blue')
        ax1.set_xscale('log')
        #ax1.tick_params(labelright=True)
        ax1.set_ylabel(r"AUC", fontsize = 22)
        ax1.set_ylim([0.5, 1])
        ax1.set_yticks(np.arange(0.5, 1.0, 0.1))
        ax1.set_xlim([0.001,0.4])
        ax1.set_xlabel(r"$r$",fontsize = 24)

        ax1.legend(loc='center left', title =  r"Pythia8, " r"$\sqrt{s}$" "=14  TeV," "\n" r"R=0.8, " r"$m_j \in$"  " [75,105] GeV" "\n" r"$p_T \in$" " [500,550] GeV" ,  title_fontsize=17, fontsize= 16, frameon = True, shadow = True, edgecolor = 'black')

        ax1.set_xticks(x, labels,)

        ax1.grid(b=True)
        plt.tight_layout()
        plt.savefig(os.path.join(figures_dir, f'ZvsQCD_AUC_inc_pt500_m75105.pdf'))
        plt.close()



        # ZvsQCD, inc, pt=500, m=[45,135] (500k jets)

        x =  np.array([0.001, 0.01, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8])
        y1 = np.array([0.9235, 0.9237, 0.9236, 0.9224, 0.9189, 0.9150, 0.9084, 0.8894, 0.8297, 0.7755, 0.7378, 0.7115, 0.6889, 0.6738, 0.6549, 0.6372, 0.6052, 0.5000])

        dy1 = np.array([0.0015, 0.0018, 0.0010, 0.0017, 0.0009, 0.0012, 0.0013, 0.0034, 0.0018, 0.0029, 0.0034, 0.0015, 0.0021, 0.0045, 0.0020, 0.0011, 0.0016, 0.])

        labels = ["PFN", 0.01, 0.05, 0.1, "",  ".2",  "", ".3", "", ".4", "", "", "", ".6","", "", "", 0.8]        
        
        fig, ax1 = plt.subplots(1,1, sharex=True )

        plt.title(r" Z vs. QCD", fontsize=20)


        ax1.errorbar(x, y1, yerr=dy1 , marker='o', capsize = 6, linestyle='solid',  linewidth=1.5, color='tab:blue')
        ax1.set_xscale('log')
        
        ax1.set_ylabel(r"AUC", fontsize = 22)
        ax1.set_ylim([0.5, 1])
        ax1.set_yticks(np.arange(0.5, 1.0, 0.1))
        ax1.set_xlim([0.001,0.4])
        ax1.set_xlabel(r"$r$",fontsize = 24)

        ax1.legend(loc='center left', title =  r"Pythia8, " r"$\sqrt{s}$" "=14  TeV," "\n" r"R=0.8, " r"$m_j \in$"  " [45,135] GeV" "\n" r"$p_T \in$" " [500,550] GeV" ,  title_fontsize=17, fontsize= 16, frameon = True, shadow = True, edgecolor = 'black')

        ax1.set_xticks(x, labels,)

        ax1.grid(b=True)
        plt.tight_layout()
        plt.savefig(os.path.join(figures_dir, f'ZvsQCD_AUC_inc_pt500_m45135.pdf'))
        plt.close()


        # Leading Angle 

        for leading_angle in self.output_numpy['leading_angle'].keys():
            mult_result = self.output_numpy['leading_angle'][leading_angle]
            mult_observable_shape = mult_result.shape
            filtered = mult_result[(mult_result>0)]
            for r in self.r_list:
                for N in self.N_cluster_list:
                    if leading_angle==(f'r{r}_N{N}_q'):
                        bins = np.arange(0.0001, 1, 0.0025)
                        if self.dataset_type == 'Zjet':
                            sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'Z')
                        else:
                           sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'q')
                    elif leading_angle==(f'r{r}_N{N}_g'):
                        if self.dataset_type == 'Zjet':
                            sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'QCD')
                        else:   
                            sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'g')
                        plt.xlim([0,0.85])
                        if self.subjet_basis == 'inclusive':
                            plt.legend(loc='best', fontsize=22, frameon=True, shadow = True, edgecolor = "black", title = r"hadrons", title_fontsize = 22)
                        else:
                            plt.legend(loc='best', fontsize=22, frameon=True, shadow = True, edgecolor = "black", title = r"$N=$"f"{N}", title_fontsize = 26)
                        plt.ylabel(r"$\frac{1}{\sigma} \ d \sigma /d\theta_{12}$", fontsize=28)
                        plt.xlabel(r"$\theta_{12}$", fontsize=30)
                        plt.yticks(fontsize=20)
                        plt.title(r"$p_T \in [1000, 1100] \ GeV$", fontsize = 26)
                        # Create a second y-axis on the right side
                        #plt.twinx()

                        # Hide the ticks for the second y-axis
                        #plt.gca().set_yticks([])
                        #plt.ylabel(r"$p_T \in [500, 550] \ GeV$", fontsize = 30, rotation = 90)

                        plt.xticks((0.0, 0.2,0.4,0.6,0.8), fontsize=24)
                        plt.grid(True)
                        plt.tight_layout()
                        plt.savefig(os.path.join(self.output_dir, f'curve leading angle r={r}, N={N}.pdf'))
                        plt.close()

                        
        # Leading angle for different radii

        
        if self.dataset_type == 'Zjet' and self.subjet_basis == 'inclusive':
            bins = np.arange(0.0001, self.R, 0.005)
            for leading_angle in self.output_numpy['leading_angle'].keys():
                mult_result = self.output_numpy['leading_angle'][leading_angle]
                mult_observable_shape = mult_result.shape
                filtered = mult_result[(mult_result>0)]
                for r in self.r_list:
                    for N in self.N_cluster_list:
                        if leading_angle==(f'r{r}_N{N}_q'):
                            sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = f'r={r}')

            plt.xlim([0,1.2*self.R])
            plt.legend(loc='best', fontsize=13, frameon=True, title = r"$\theta_{12}$"f" for different radii", title_fontsize = 14)
            plt.ylabel(r"$\frac{1}{\sigma} \ d \sigma /d\theta_{12}$", fontsize=20)
            plt.xlabel(r"$\theta_{12}$", fontsize=20)
            plt.grid(True)
            plt.tight_layout()
            plt.savefig(os.path.join(self.output_dir, f'curve leading angle different radii.pdf'))
            plt.close()


        if self.dataset_type == 'Zjet' and self.subjet_basis == 'inclusive':
            bins = np.arange(0.0001, self.R, 0.005)
            for leading_angle in self.output_numpy['leading_angle'].keys():
                mult_result = self.output_numpy['leading_angle'][leading_angle]
                mult_observable_shape = mult_result.shape

                for r in self.r_list:
                    for N in self.N_cluster_list:
                        if leading_angle == (f'r{r}_N{N}_q'):
                            plt.hist(mult_result, bins,histtype='step', density=True, label = f'r={r}', linewidth=1.5, linestyle='-', alpha=0.8)
            
            plt.xlim([0,1.2*self.R])
            plt.legend(loc='best', fontsize=16, frameon=True, title = r"$\theta_{12}$"f" for different radii", title_fontsize = 16)
            plt.ylabel(r"$\frac{1}{\sigma} \ d \sigma /d\theta_{12}$", fontsize=20)
            plt.xlabel(r"$\theta_{12}$", fontsize=20)
            plt.grid(True)
            plt.tight_layout()
            plt.savefig(os.path.join(self.output_dir, f'histogram leading angle different radii.pdf'))
            plt.close()

        for leading_angle in self.output_numpy['leading_angle_13'].keys():

            mult_result = self.output_numpy['leading_angle_13'][leading_angle]
            mult_observable_shape = mult_result.shape
            filtered = mult_result[(mult_result>0)]
            for r in self.r_list:
                for N in self.N_cluster_list:
                    if leading_angle == (f'r{r}_N{N}_q'):
                        bins = np.arange(0.0001, 2*self.R, 0.0025)
                        if self.dataset_type == 'Zjet':
                            sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'Z')
                        else:
                           sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'q')
                    elif leading_angle == (f'r{r}_N{N}_g'):
                        if self.dataset_type == 'Zjet':
                            sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'QCD')
                        else:   
                            sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'g')
                        plt.xlim([0,2*self.R])
                        if self.subjet_basis == 'inclusive':
                            plt.legend(loc='best', fontsize=18, frameon=True, title = r"$r_{subjet}=$"f"{r}", title_fontsize = 18)
                        else:
                            plt.legend(loc='best', fontsize=18, frameon=True, title = r"$N_{subjet}=$"f"{N}", title_fontsize = 18)
                        plt.ylabel(r"$\frac{1}{\sigma} \ d \sigma /d\theta_{13}$", fontsize=20)
                        plt.xlabel(r"$\theta_{13}$", fontsize=20)
                        plt.grid(True)
                        plt.tight_layout()
                        plt.savefig(os.path.join(self.output_dir, f'curve 13 leading angle r={r}, N={N}.pdf'))
                        plt.close()

        for leading_angle in self.output_numpy['leading_angle_23'].keys():
            
            mult_result = self.output_numpy['leading_angle_23'][leading_angle]
            mult_observable_shape = mult_result.shape
            filtered = mult_result[(mult_result>0)]
            for r in self.r_list:
                for N in self.N_cluster_list:
                    if leading_angle == (f'r{r}_N{N}_q'):
                        bins = np.arange(0.0001, 2*self.R, 0.0025)
                        if self.dataset_type == 'Zjet':
                            sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'Z')
                        else:
                           sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'q')
                    elif leading_angle == (f'r{r}_N{N}_g'):
                        if self.dataset_type == 'Zjet':
                            sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'QCD')
                        else:   
                            sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'g')
                        plt.xlim([0,2*self.R])
                        if self.subjet_basis == 'inclusive':
                            plt.legend(loc='best', fontsize=18, frameon=True, title = r"$r_{subjet}=$"f"{r}", title_fontsize = 18)
                        else:
                            plt.legend(loc='best', fontsize=18, frameon=True, title = r"$N_{subjet}=$"f"{N}", title_fontsize = 18)
                        plt.ylabel(r"$\frac{1}{\sigma} \ d \sigma /d\theta_{23}$", fontsize=20)
                        plt.xlabel(r"$\theta_{23}$", fontsize=20)
                        plt.grid(True)
                        plt.tight_layout()
                        plt.savefig(os.path.join(self.output_dir, f'curve 23 leading angle r={r}, N={N}.pdf'))
                        plt.close()

        
        for leading_angle in self.output_numpy['leading_angle_min1323'].keys():
            
            mult_result = self.output_numpy['leading_angle_min1323'][leading_angle]
            mult_observable_shape = mult_result.shape
            filtered = mult_result[(mult_result>0)]
            for r in self.r_list:
                for N in self.N_cluster_list:
                    if leading_angle == (f'r{r}_N{N}_q'):
                        bins = np.arange(0.0001, 2*self.R, 0.0025)
                        if self.dataset_type == 'Zjet':
                            sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'Z')
                        else:
                           sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'q')
                    elif leading_angle == (f'r{r}_N{N}_g'):
                        if self.dataset_type == 'Zjet':
                            sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'QCD')
                        else:   
                            sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'g')
                        plt.xlim([0,2*self.R])
                        if self.subjet_basis == 'inclusive':
                            plt.legend(loc='best', fontsize=18, frameon=True, title = r"$r_{subjet}=$"f"{r}", title_fontsize = 18)
                        else:
                            plt.legend(loc='best', fontsize=18, frameon=True, title = r"$N_{subjet}=$"f"{N}", title_fontsize = 18)
                        plt.ylabel(r"$\frac{1}{\sigma} \ d \sigma /dmin(\theta_{13},\theta_{23})$", fontsize=20)
                        plt.xlabel(r"$min(\theta_{13},\theta_{23})$", fontsize=20)
                        plt.grid(True)
                        plt.tight_layout()
                        plt.savefig(os.path.join(self.output_dir, f'curve min1323 leading angle r={r}, N={N}.pdf'))
                        plt.close()

        for leading_angle in self.output_numpy['leading_angle_max1323'].keys():
            
            mult_result = self.output_numpy['leading_angle_max1323'][leading_angle]
            mult_observable_shape = mult_result.shape
            filtered = mult_result[(mult_result>0)]
            for r in self.r_list:
                for N in self.N_cluster_list:
                    if leading_angle  == (f'r{r}_N{N}_q'):
                        bins = np.arange(0.0001, 2*self.R, 0.0025)
                        if self.dataset_type == 'Zjet':
                            sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'Z')
                        else:
                           sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'q')
                    elif leading_angle  == (f'r{r}_N{N}_g'):
                        if self.dataset_type == 'Zjet':
                            sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'QCD')
                        else:   
                            sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'g')
                        plt.xlim([0,2*self.R])
                        if self.subjet_basis == 'inclusive':
                            plt.legend(loc='best', fontsize=18, frameon=True, title = r"$r_{subjet}=$"f"{r}", title_fontsize = 18)
                        else:
                            plt.legend(loc='best', fontsize=18, frameon=True, title = r"$N_{subjet}=$"f"{N}", title_fontsize = 18)
                        plt.ylabel(r"$\frac{1}{\sigma} \ d \sigma /dmax(\theta_{13},\theta_{23})$", fontsize=20)
                        plt.xlabel(r"$max(\theta_{13},\theta_{23})$", fontsize=20)
                        plt.grid(True)
                        plt.tight_layout()
                        plt.savefig(os.path.join(self.output_dir, f'curve max1323 leading angle r={r}, N={N}.pdf'))
                        plt.close()

        # Herwig Leading Angles Plots

        if self.Herwig_dataset == 'True':

            for r in self.r_list:
                for N in self.N_cluster_list:
                    count=0
                    bins = np.arange(0.0001, 2*self.R, 0.0025)
                    for leading_angle in self.output_numpy['leading_angle'].keys():
                    
                        mult_result = self.output_numpy['leading_angle'][leading_angle]
                        mult_observable_shape = mult_result.shape
                        filtered = mult_result[(mult_result>0)]

                        if leading_angle  == (f'r{r}_N{N}_q'):
                            count+=1
                            if self.dataset_type == 'Zjet':
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1, "color": "tab:blue"}, label = 'Z Pythia')
                            else:
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1, "color": "tab:blue"}, label = 'q Pythia')
                        
                        elif leading_angle  == (f'r{r}_N{N}_g'):
                            count+=1
                            if self.dataset_type == 'Zjet':
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1, "color": "darkorange"}, label = 'QCD Pythia')
                            else:   
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1, "color": "darkorange"}, label = 'g Pythia')
                        
                        if leading_angle  == (f'herwig_r{r}_N{N}_q'):
                            count+=1
                            if self.dataset_type == 'Zjet':
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--', "color": "tab:blue"}, label = 'Z Herwig')
                            else:
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--', "color": "tab:blue"}, label = 'q Herwig')
                        
                        elif leading_angle  == (f'herwig_r{r}_N{N}_g'):
                            count+=1
                            if self.dataset_type == 'Zjet':
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--', "color": "darkorange"}, label = 'QCD Herwig')
                            else:
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--', "color": "darkorange"}, label = 'g Herwig')

                        if count ==4:                            
                            if self.subjet_basis == 'inclusive':
                                plt.legend(loc='best', fontsize=18, frameon=True, title = r"$r_{subjet}=$"f"{r}", title_fontsize = 18)
                            else:
                                plt.legend(loc='best', fontsize=18, frameon=True, title = r"$N_{subjet}=$"f"{N}", title_fontsize = 18)

                            plt.xlim([0,2*self.R])
                            plt.ylabel(r"$\frac{1}{\sigma} \ d \sigma /d\theta_{12}$", fontsize=20)
                            plt.xlabel(r"$\theta_{12}$", fontsize=20)
                            plt.grid(True)
                            plt.tight_layout()
                            plt.savefig(os.path.join(self.output_dir, f'curve leading angle Herwig and Pythia r={r}, N={N}.pdf'))
                            plt.close()
                            break
            

            for r in self.r_list:
                for N in self.N_cluster_list:
                    count=0
                    bins = np.arange(0.0001, 2*self.R, 0.0025)
                    for leading_angle in self.output_numpy['leading_angle_13'].keys():
                    
                        mult_result = self.output_numpy['leading_angle_13'][leading_angle]
                        mult_observable_shape = mult_result.shape
                        filtered = mult_result[(mult_result>0)]

                        if leading_angle  == (f'r{r}_N{N}_q'):
                            count+=1
                            if self.dataset_type == 'Zjet':
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1, "color": "tab:blue"}, label = 'Z Pythia')
                            else:
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1, "color": "tab:blue"}, label = 'q Pythia')
                        
                        elif leading_angle  == (f'r{r}_N{N}_g'):
                            count+=1
                            if self.dataset_type == 'Zjet':
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1, "color": "darkorange"}, label = 'QCD Pythia')
                            else:   
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1, "color": "darkorange"}, label = 'g Pythia')
                        
                        if leading_angle  == (f'herwig_r{r}_N{N}_q'):
                            count+=1
                            if self.dataset_type == 'Zjet':
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--', "color": "tab:blue"}, label = 'Z Herwig')
                            else:
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--', "color": "tab:blue"}, label = 'q Herwig')
                        
                        elif leading_angle  == (f'herwig_r{r}_N{N}_g'):
                            count+=1
                            if self.dataset_type == 'Zjet':
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--', "color": "darkorange"}, label = 'QCD Herwig')
                            else:
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--', "color": "darkorange"}, label = 'g Herwig')

                        if count ==4:                            
                            if self.subjet_basis == 'inclusive':
                                plt.legend(loc='best', fontsize=18, frameon=True, title = r"$r_{subjet}=$"f"{r}", title_fontsize = 18)
                            else:
                                plt.legend(loc='best', fontsize=18, frameon=True, title = r"$N_{subjet}=$"f"{N}", title_fontsize = 18)

                            plt.xlim([0,2*self.R])
                            plt.ylabel(r"$\frac{1}{\sigma} \ d \sigma /d\theta_{13}$", fontsize=20)
                            plt.xlabel(r"$\theta_{12}$", fontsize=20)
                            plt.grid(True)
                            plt.tight_layout()
                            plt.savefig(os.path.join(self.output_dir, f'curve 13 leading angle Herwig and Pythia r={r}, N={N}.pdf'))
                            plt.close()
                            break


            for r in self.r_list:
                for N in self.N_cluster_list:
                    count=0
                    bins = np.arange(0.0001, 2*self.R, 0.0025)
                    for leading_angle in self.output_numpy['leading_angle_23'].keys():
                    
                        mult_result = self.output_numpy['leading_angle_23'][leading_angle]
                        mult_observable_shape = mult_result.shape
                        filtered = mult_result[(mult_result>0)]

                        if leading_angle  == (f'r{r}_N{N}_q'):
                            count+=1
                            if self.dataset_type == 'Zjet':
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1, "color": "tab:blue"}, label = 'Z Pythia')
                            else:
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1, "color": "tab:blue"}, label = 'q Pythia')
                        
                        elif leading_angle  == (f'r{r}_N{N}_g'):
                            count+=1
                            if self.dataset_type == 'Zjet':
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1, "color": "darkorange"}, label = 'QCD Pythia')
                            else:   
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1, "color": "darkorange"}, label = 'g Pythia')
                        
                        if leading_angle  == (f'herwig_r{r}_N{N}_q'):
                            count+=1
                            if self.dataset_type == 'Zjet':
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--', "color": "tab:blue"}, label = 'Z Herwig')
                            else:
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--', "color": "tab:blue"}, label = 'q Herwig')
                        
                        elif leading_angle  == (f'herwig_r{r}_N{N}_g'):
                            count+=1
                            if self.dataset_type == 'Zjet':
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--', "color": "darkorange"}, label = 'QCD Herwig')
                            else:
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--', "color": "darkorange"}, label = 'g Herwig')

                        if count ==4:                            
                            if self.subjet_basis == 'inclusive':
                                plt.legend(loc='best', fontsize=18, frameon=True, title = r"$r_{subjet}=$"f"{r}", title_fontsize = 18)
                            else:
                                plt.legend(loc='best', fontsize=18, frameon=True, title = r"$N_{subjet}=$"f"{N}", title_fontsize = 18)

                            plt.xlim([0,2*self.R])
                            plt.ylabel(r"$\frac{1}{\sigma} \ d \sigma /d\theta_{23}$", fontsize=20)
                            plt.xlabel(r"$\theta_{12}$", fontsize=20)
                            plt.grid(True)
                            plt.tight_layout()
                            plt.savefig(os.path.join(self.output_dir, f'curve 23 leading angle Herwig and Pythia r={r}, N={N}.pdf'))
                            plt.close()
                            break

            
            for r in self.r_list:
                for N in self.N_cluster_list:
                    count=0
                    bins = np.arange(0.0001, 2*self.R, 0.0025)
                    for leading_angle in self.output_numpy['leading_angle_min1323'].keys():
                    
                        mult_result = self.output_numpy['leading_angle_min1323'][leading_angle]
                        mult_observable_shape = mult_result.shape
                        filtered = mult_result[(mult_result>0)]

                        if leading_angle  == (f'r{r}_N{N}_q'):
                            count+=1
                            if self.dataset_type == 'Zjet':
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1, "color": "tab:blue"}, label = 'Z Pythia')
                            else:
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1, "color": "tab:blue"}, label = 'q Pythia')
                        
                        elif leading_angle  == (f'r{r}_N{N}_g'):
                            count+=1
                            if self.dataset_type == 'Zjet':
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1, "color": "darkorange"}, label = 'QCD Pythia')
                            else:   
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1, "color": "darkorange"}, label = 'g Pythia')
                        
                        if leading_angle  == (f'herwig_r{r}_N{N}_q'):
                            count+=1
                            if self.dataset_type == 'Zjet':
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--', "color": "tab:blue"}, label = 'Z Herwig')
                            else:
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--', "color": "tab:blue"}, label = 'q Herwig')
                        
                        elif leading_angle  == (f'herwig_r{r}_N{N}_g'):
                            count+=1
                            if self.dataset_type == 'Zjet':
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--', "color": "darkorange"}, label = 'QCD Herwig')
                            else:
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--', "color": "darkorange"}, label = 'g Herwig')

                        if count ==4:                            
                            if self.subjet_basis == 'inclusive':
                                plt.legend(loc='best', fontsize=18, frameon=True, title = r"$r_{subjet}=$"f"{r}", title_fontsize = 18)
                            else:
                                plt.legend(loc='best', fontsize=18, frameon=True, title = r"$N_{subjet}=$"f"{N}", title_fontsize = 18)

                            plt.xlim([0,2*self.R])
                            plt.ylabel(r"$\frac{1}{\sigma} \ d \sigma /d\theta_{14}$", fontsize=20)
                            plt.xlabel(r"$\theta_{12}$", fontsize=20)
                            plt.grid(True)
                            plt.tight_layout()
                            plt.savefig(os.path.join(self.output_dir, f'curve min1323 leading angle Herwig and Pythia r={r}, N={N}.pdf'))
                            plt.close()
                            break


            for r in self.r_list:
                for N in self.N_cluster_list:
                    count=0
                    bins = np.arange(0.0001, 2*self.R, 0.0025)
                    for leading_angle in self.output_numpy['leading_angle_max1323'].keys():
                    
                        mult_result = self.output_numpy['leading_angle_max1323'][leading_angle]
                        mult_observable_shape = mult_result.shape
                        filtered = mult_result[(mult_result>0)]

                        if leading_angle  == (f'r{r}_N{N}_q'):
                            count+=1
                            if self.dataset_type == 'Zjet':
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1, "color": "tab:blue"}, label = 'Z Pythia')
                            else:
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1, "color": "tab:blue"}, label = 'q Pythia')
                        
                        elif leading_angle  == (f'r{r}_N{N}_g'):
                            count+=1
                            if self.dataset_type == 'Zjet':
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1, "color": "darkorange"}, label = 'QCD Pythia')
                            else:   
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1, "color": "darkorange"}, label = 'g Pythia')
                        
                        if leading_angle  == (f'herwig_r{r}_N{N}_q'):
                            count+=1
                            if self.dataset_type == 'Zjet':
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--', "color": "tab:blue"}, label = 'Z Herwig')
                            else:
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--', "color": "tab:blue"}, label = 'q Herwig')
                        
                        elif leading_angle  == (f'herwig_r{r}_N{N}_g'):
                            count+=1
                            if self.dataset_type == 'Zjet':
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--', "color": "darkorange"}, label = 'QCD Herwig')
                            else:
                                sns.distplot(filtered, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--', "color": "darkorange"}, label = 'g Herwig')

                        if count ==4:                            
                            if self.subjet_basis == 'inclusive':
                                plt.legend(loc='best', fontsize=18, frameon=True, title = r"$r_{subjet}=$"f"{r}", title_fontsize = 18)
                            else:
                                plt.legend(loc='best', fontsize=18, frameon=True, title = r"$N_{subjet}=$"f"{N}", title_fontsize = 18)

                            plt.xlim([0,2*self.R])
                            plt.ylabel(r"$\frac{1}{\sigma} \ d \sigma /d\theta_{14}$", fontsize=20)
                            plt.xlabel(r"$\theta_{12}$", fontsize=20)
                            plt.grid(True)
                            plt.tight_layout()
                            plt.savefig(os.path.join(self.output_dir, f'curve max1323 leading angle Herwig and Pythia r={r}, N={N}.pdf'))
                            plt.close()
                            break


            # 2 Hardest subjet z distribution
            try:
                for hardest_subjet_z_observable in self.output_numpy['4_hardest_subjets_z'].keys():

                    mult_result = self.output_numpy['4_hardest_subjets_z'][hardest_subjet_z_observable]
                    mult_observable_shape = mult_result.shape
                    bins = np.arange(0.0001, 1, 0.01)
                    for r in self.r_list:
                        for N in self.N_cluster_list:
                            if hardest_subjet_z_observable.endswith(f'herwig_r{r}_N{N}_q1'):
                                if self.dataset_type == 'Zjet':
                                    sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--'}, label = 'leading Z jet', color='red')
                                else:
                                    sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--'}, label = 'leading q jet', color='red')
                            elif hardest_subjet_z_observable.endswith(f'herwig_r{r}_N{N}_q2'):
                                if self.dataset_type == 'Zjet':
                                    sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--'}, label = 'subleading Z jet')
                                else:
                                    sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--'}, label = 'subleading q jet', color='orange')
                            elif hardest_subjet_z_observable.endswith(f'herwig_r{r}_N{N}_g1'):
                                if self.dataset_type == 'Zjet':
                                    sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--'}, label = 'leading QCD jet', color='orange')
                                else:
                                    sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--'}, label = 'leading g jet', color='blue')
                            elif hardest_subjet_z_observable.endswith(f'herwig_r{r}_N{N}_g2'):
                                if self.dataset_type == 'Zjet':
                                    sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--'}, label = 'subleading QCD jet', color='black')
                                else:
                                    sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linestyle':'--'}, label = 'subleading g jet', color='black')
                                    
                                if self.subjet_basis == 'inclusive':
                                    plt.legend(loc='best', fontsize=18, frameon=True, title = r"$r_{subjet}=$"f"{r}", title_fontsize = 20)
                                else: 
                                    plt.legend(loc='best', fontsize=18, frameon=True, title = r"$N_{subjet}=$"f"{N}", title_fontsize = 20)
                                plt.xlim([0,1])
                                plt.ylabel(r"$ \frac{1}{\sigma} \ d\sigma /dz_{1,2}$", fontsize=20)
                                plt.xlabel(r"$z=p_t^{subjet}/p_t^{jet}$", fontsize=20)
                                plt.grid(True)
                                plt.tight_layout()
                                plt.savefig(os.path.join(self.output_dir, f'curve 12 hardest subjets Herwig, z distribution r={r}, N={N}.pdf'))
                                plt.close()
            except:
                pass 


        #  Leading Angle 

        for leading_angle in self.output_numpy['leading_angle'].keys():
            
            mult_result = self.output_numpy['leading_angle'][leading_angle]
            mult_observable_shape = mult_result.shape

            for r in self.r_list:
                for N in self.N_cluster_list:
                    if leading_angle == (f'r{r}_N{N}_q'):
                        max = np.amax(mult_result)
                        bins = np.arange(0.01, 2*self.R, 0.01)
                        if self.dataset_type == 'Zjet':
                            plt.hist(mult_result, bins,histtype='step', density=True, label = 'Z', linewidth=2, linestyle='-', alpha=0.5)
                        else:
                            plt.hist(mult_result, bins,histtype='step', density=True, label = 'q', linewidth=2, linestyle='-', alpha=0.5)
                    elif leading_angle == (f'r{r}_N{N}_g'):
                        if self.dataset_type == 'Zjet':
                            plt.hist(mult_result, bins, histtype='step', density=True, label = 'QCD', linewidth=2, linestyle='-', alpha=0.5)
                        else:    
                            plt.hist(mult_result, bins, histtype='step', density=True, label = 'g', linewidth=2, linestyle='-', alpha=0.5)
                        plt.legend(loc='best', fontsize=14, frameon=True)
                        plt.ylabel('\\textit{Density}', fontsize=20)
                        plt.grid(True)
                        plt.tight_layout()
                        plt.savefig(os.path.join(self.output_dir, f'leading angle r={r}, N={N}.pdf'))
                        plt.close()
        
        #  13 Angle 

        for leading_angle in self.output_numpy['leading_angle_13'].keys():
            
            mult_result = self.output_numpy['leading_angle_13'][leading_angle]
            mult_observable_shape = mult_result.shape

            for r in self.r_list:
                for N in self.N_cluster_list:
                    if leading_angle == (f'r{r}_N{N}_q'):
                        max = np.amax(mult_result)
                        bins = np.arange(0.01, 2*self.R, 0.01)
                        if self.dataset_type == 'Zjet':
                            plt.hist(mult_result, bins,histtype='step', density=True, label = 'Z', linewidth=2, linestyle='-', alpha=0.5)
                        else:
                            plt.hist(mult_result, bins,histtype='step', density=True, label = 'q', linewidth=2, linestyle='-', alpha=0.5)
                    elif leading_angle == (f'r{r}_N{N}_g'):
                        if self.dataset_type == 'Zjet':
                            plt.hist(mult_result, bins, histtype='step', density=True, label = 'QCD', linewidth=2, linestyle='-', alpha=0.5)
                        else:    
                            plt.hist(mult_result, bins, histtype='step', density=True, label = 'g', linewidth=2, linestyle='-', alpha=0.5)
                        plt.legend(loc='best', fontsize=14, frameon=True)
                        plt.ylabel('\\textit{Density}', fontsize=20)
                        plt.grid(True)
                        plt.tight_layout()
                        plt.savefig(os.path.join(self.output_dir, f'13 leading angle r={r}, N={N}.pdf'))
                        plt.close()
        
        #  23 Angle 

        for leading_angle in self.output_numpy['leading_angle_23'].keys():
            
            mult_result = self.output_numpy['leading_angle_23'][leading_angle]
            mult_observable_shape = mult_result.shape

            for r in self.r_list:
                for N in self.N_cluster_list:
                    if leading_angle == (f'r{r}_N{N}_q'):
                        max = np.amax(mult_result)
                        bins = np.arange(0.01, 2*self.R, 0.01)
                        if self.dataset_type == 'Zjet':
                            plt.hist(mult_result, bins,histtype='step', density=True, label = 'Z', linewidth=2, linestyle='-', alpha=0.5)
                        else:
                            plt.hist(mult_result, bins,histtype='step', density=True, label = 'q', linewidth=2, linestyle='-', alpha=0.5)
                    elif leading_angle == (f'r{r}_N{N}_g'):
                        if self.dataset_type == 'Zjet':
                            plt.hist(mult_result, bins, histtype='step', density=True, label = 'QCD', linewidth=2, linestyle='-', alpha=0.5)
                        else:    
                            plt.hist(mult_result, bins, histtype='step', density=True, label = 'g', linewidth=2, linestyle='-', alpha=0.5)
                        plt.legend(loc='best', fontsize=14, frameon=True)
                        plt.ylabel('\\textit{Density}', fontsize=20)
                        plt.grid(True)
                        plt.tight_layout()
                        plt.savefig(os.path.join(self.output_dir, f'23 leading angle r={r}, N={N}.pdf'))
                        plt.close()
        
        #  min(13,23) Angle 

        for leading_angle in self.output_numpy['leading_angle_min1323'].keys():
            
            mult_result = self.output_numpy['leading_angle_min1323'][leading_angle]
            mult_observable_shape = mult_result.shape

            for r in self.r_list:
                for N in self.N_cluster_list:
                    if leading_angle == (f'r{r}_N{N}_q'):
                        max = np.amax(mult_result)
                        bins = np.arange(0.01, 2*self.R, 0.01)
                        if self.dataset_type == 'Zjet':
                            plt.hist(mult_result, bins,histtype='step', density=True, label = 'Z', linewidth=2, linestyle='-', alpha=0.5)
                        else:
                            plt.hist(mult_result, bins,histtype='step', density=True, label = 'q', linewidth=2, linestyle='-', alpha=0.5)
                    elif leading_angle == (f'r{r}_N{N}_g'):
                        if self.dataset_type == 'Zjet':
                            plt.hist(mult_result, bins, histtype='step', density=True, label = 'QCD', linewidth=2, linestyle='-', alpha=0.5)
                        else:    
                            plt.hist(mult_result, bins, histtype='step', density=True, label = 'g', linewidth=2, linestyle='-', alpha=0.5)
                        plt.legend(loc='best', fontsize=14, frameon=True)
                        plt.ylabel('\\textit{Density}', fontsize=20)
                        plt.grid(True)
                        plt.tight_layout()
                        plt.savefig(os.path.join(self.output_dir, f'min(13,23) leading angle r={r}, N={N}.pdf'))
                        plt.close()
        
        #  mmaxin(13,23) Angle 

        for leading_angle in self.output_numpy['leading_angle_max1323'].keys():
            
            mult_result = self.output_numpy['leading_angle_max1323'][leading_angle]
            mult_observable_shape = mult_result.shape

            for r in self.r_list:
                for N in self.N_cluster_list:
                    if leading_angle == (f'r{r}_N{N}_q'):
                        max = np.amax(mult_result)
                        bins = np.arange(0.01, 2*self.R, 0.01)
                        if self.dataset_type == 'Zjet':
                            plt.hist(mult_result, bins,histtype='step', density=True, label = 'Z', linewidth=2, linestyle='-', alpha=0.5)
                        else:
                            plt.hist(mult_result, bins,histtype='step', density=True, label = 'q', linewidth=2, linestyle='-', alpha=0.5)
                    elif leading_angle == (f'r{r}_N{N}_g'):
                        if self.dataset_type == 'Zjet':
                            plt.hist(mult_result, bins, histtype='step', density=True, label = 'QCD', linewidth=2, linestyle='-', alpha=0.5)
                        else:    
                            plt.hist(mult_result, bins, histtype='step', density=True, label = 'g', linewidth=2, linestyle='-', alpha=0.5)
                        plt.legend(loc='best', fontsize=14, frameon=True)
                        plt.ylabel('\\textit{Density}', fontsize=20)
                        plt.grid(True)
                        plt.tight_layout()
                        plt.savefig(os.path.join(self.output_dir, f'max(13,23) leading angle r={r}, N={N}.pdf'))
                        plt.close()

        # Jet Mass
        jet_mass_q, jet_mass_g = [], []

        for col in range(self.n_total):
            if self.y[col] == 1:
                jet_mass_q.append(self.output['Jet_Mass']['mass'][col])
            else:
                jet_mass_g.append(self.output['Jet_Mass']['mass'][col])
        
        bin_size = 2
        weights_q= np.ones_like(jet_mass_q)/float(len(jet_mass_q))/bin_size
        weights_g= np.ones_like(jet_mass_g)/float(len(jet_mass_g))/bin_size
        bins = np.arange(0., 204, bin_size)

        if self.dataset_type == 'Zjet':
            plt.hist(jet_mass_q,
                    bins, weights = weights_q,
                    histtype='step',
                    label = 'Z',
                    linewidth=2,
                    linestyle='-',
                    alpha=0.5)
            plt.hist(jet_mass_g,
                    bins, weights = weights_g,
                    histtype='step',
                    label = 'QCD',
                    linewidth=2,
                    linestyle='-',
                    alpha=0.5)
        else:
            plt.hist(jet_mass_q,
                    bins, weights = weights_q,
                    histtype='step',
                    label = 'q',
                    linewidth=2,
                    linestyle='-',
                    alpha=0.5)
            plt.hist(jet_mass_g,
                    bins, weights = weights_g,
                    histtype='step',
                    label = 'g',
                    linewidth=2,
                    linestyle='-',
                    alpha=0.5)
        plt.xlim([0,200])
        plt.legend(loc='best', fontsize=21,  frameon=True, shadow = True, edgecolor = "black")
        plt.xlabel(r"$m_j$" " (GeV)", fontsize=25)
        plt.ylabel(r"$1/\sigma \cdot d\sigma/dm_j $", fontsize=25)
        plt.yticks(fontsize=18)
        plt.xticks(fontsize=18)
        plt.grid(True)
        plt.tight_layout()
        plt.savefig(os.path.join(self.output_dir, f'jet_mass_mj.pdf'))
        plt.close() 

        # N subjettiness ratio: τ2/τ1
        t2_q=[]
        t2_g=[]
        t1_q=[]
        t1_g=[]

        for nsub_observable in self.output_numpy['nsub'].keys():

            mult_result = self.output_numpy['nsub'][nsub_observable]
            mult_observable_shape = mult_result.shape

            if nsub_observable == 'N1_beta1':
                for col in range(self.n_total):
                    if self.y[col] == 1:
                        t1_q.append(mult_result[col])
                    if self.y[col] == 0:
                        t1_g.append(mult_result[col])
            if nsub_observable == 'N2_beta1':
                for col in range(self.n_total):
                    if self.y[col] == 1:
                        t2_q.append(mult_result[col])
                    if self.y[col] == 0:
                        t2_g.append(mult_result[col])

        bin_size = 0.02
        t2_over_t1_q = np.array(t2_q)/np.array(t1_q)
        t2_over_t1_g = np.array(t2_g)/np.array(t1_g)
        weights_q= np.ones_like(t2_over_t1_q)/float(len(t2_over_t1_q))/bin_size
        weights_g= np.ones_like(t2_over_t1_g)/float(len(t2_over_t1_g))/bin_size


        bins = np.arange(0., 1.02, bin_size)

        if self.dataset_type == 'Zjet':
            sns.distplot(t2_over_t1_q, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'Z')
            sns.distplot(t2_over_t1_g, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'QCD')
        else:
            sns.distplot(t2_over_t1_q, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'q')
            sns.distplot(t2_over_t1_g, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'g')
                        
        plt.xlim([0,1])
        plt.ylim([0,4])
        plt.legend(loc='best', fontsize=22, frameon=True, shadow = True, edgecolor = "black")
        plt.ylabel(r"$1/\sigma \cdot d\sigma/d\frac{\tau_2^{(1)}}{\tau_1^{(1)}} $", fontsize=24)
        plt.xlabel(r"$\tau_2^{(1)}/\tau_1^{(1)}$", fontsize=24)
        plt.yticks(fontsize=18)
        plt.xticks(fontsize=18)
        plt.grid(True)
        plt.tight_layout()
        plt.savefig(os.path.join(self.output_dir, f'curve t2_over_t1.pdf'))
        plt.close()


        if self.dataset_type == 'Zjet':
            plt.hist(t2_over_t1_q,
                    bins, weights = weights_q,
                    histtype='step',
                    label = 'Z',
                    linewidth=2,
                    linestyle='-',
                    alpha=0.5)
            plt.hist(t2_over_t1_g,
                    bins, weights = weights_g,
                    histtype='step',
                    label = 'QCD',
                    linewidth=2,
                    linestyle='-',
                    alpha=0.5)
        else:
            plt.hist(t2_over_t1_q,
                    bins, weights = weights_q,
                    histtype='step',
                    label = 'q',
                    linewidth=2,
                    linestyle='-',
                    alpha=0.5)
            plt.hist(t2_over_t1_g,
                    bins, weights = weights_g,
                    histtype='step',
                    label = 'g',
                    linewidth=2,
                    linestyle='-',
                    alpha=0.5)

        plt.xlim([0,1])
        plt.ylim([0,4])
        plt.legend(loc='best', fontsize=22,  frameon=True, shadow = True, edgecolor = "black")
        plt.ylabel(r"$1/\sigma \cdot d\sigma/d \left(\frac{\tau_2^{(1)}}{\tau_1^{(1)}}\right ) $", fontsize=24)
        plt.xlabel(r"$\tau_2^{(1)}/\tau_1^{(1)}$", fontsize=24)
        plt.grid(True)
        plt.tight_layout()
        plt.savefig(os.path.join(self.output_dir, f't2_over_t1.pdf'))
        plt.close() 

        # Subjet Multiplicity

        for subjet_multiplicity_observable in self.output_numpy['subjet_multiplicity'].keys():

            mult_result = self.output_numpy['subjet_multiplicity'][subjet_multiplicity_observable]
            mult_observable_shape = mult_result.shape

            for r in self.r_list:
                for N in self.N_cluster_list:
                    if subjet_multiplicity_observable.endswith(f'r{r}_N{N}_q'):
                        # Plot distributions
                        if self.subjet_basis == 'exclusive':
                            plt.xlabel(f'Pythia,  {self.subjet_basis} clust., {self.Clustering_Alg}, N={N}', fontsize=10)
                        if self.subjet_basis == 'inclusive':
                            plt.xlabel(f'Pythia,  {self.subjet_basis} clust., {self.Clustering_Alg}, r={r}', fontsize=10)
                        max = np.amax(mult_result)
                        bins = np.arange(0., N, 2.)
                        if self.dataset_type == 'Zjet':
                            plt.hist(mult_result,
                                    bins,
                                    histtype='step',
                                    density=True,
                                    label = 'Z',
                                    linewidth=2,
                                    linestyle='-',
                                    alpha=0.5)
                        else:
                            plt.hist(mult_result,
                                    bins,
                                    histtype='step',
                                    density=True,
                                    label = 'q',
                                    linewidth=2,
                                    linestyle='-',
                                    alpha=0.5)
                    elif subjet_multiplicity_observable.endswith(f'r{r}_N{N}_g'):
                        if self.dataset_type == 'Zjet':
                            plt.hist(mult_result,
                                    bins,
                                    histtype='step',
                                    density=True,
                                    label = 'QCD',
                                    linewidth=2,
                                    linestyle='-',
                                    alpha=0.5)
                        else:
                            plt.hist(mult_result,
                                    bins,
                                    histtype='step',
                                    density=True,
                                    label = 'g',
                                    linewidth=2,
                                    linestyle='-',
                                    alpha=0.5)
                        plt.legend(loc='best', fontsize=14, frameon=True)
                        plt.ylabel('\\textit{Density}', fontsize=20)
                        plt.tight_layout()
                        plt.savefig(os.path.join(self.output_dir, f'subjet multiplicity r={r}, N={N}.pdf'))
                        plt.close()  
                    
        

        # Hardest subjet z distribution

        for hardest_subjet_z_observable in self.output_numpy['hardest_subjet_z'].keys():

            mult_result = self.output_numpy['hardest_subjet_z'][hardest_subjet_z_observable]
            mult_observable_shape = mult_result.shape

            for r in self.r_list:
                for N in self.N_cluster_list:
                    if hardest_subjet_z_observable.endswith(f'r{r}_N{N}_q'):
                        # Plot distributions
                        if self.subjet_basis == 'exclusive':
                            plt.xlabel(f'Pythia, hardest z distr., {self.subjet_basis} clust., {self.Clustering_Alg}, N={N}', fontsize=10)
                        if self.subjet_basis == 'inclusive':
                            plt.xlabel(f'Pythia, hardest z distr., {self.subjet_basis} clust., {self.Clustering_Alg}, r={r}', fontsize=10)
                        max = np.amax(mult_result)*1.25
                        bins = np.arange(0., 1, 0.04)
                        if self.dataset_type == 'Zjet':
                            plt.hist(mult_result,
                                    bins,
                                    histtype='step',
                                    density=True,
                                    label = 'Z',
                                    linewidth=2,
                                    linestyle='-',
                                    alpha=0.5)
                        else:
                            plt.hist(mult_result,
                                    bins,
                                    histtype='step',
                                    density=True,
                                    label = 'q',
                                    linewidth=2,
                                    linestyle='-',
                                    alpha=0.5)
                    elif hardest_subjet_z_observable.endswith(f'r{r}_N{N}_g'):
                        if self.dataset_type == 'Zjet':
                            plt.hist(mult_result,
                                    bins,
                                    histtype='step',
                                    density=True,
                                    label = 'QCD',
                                    linewidth=2,
                                    linestyle='-',
                                    alpha=0.5)
                        else:
                            plt.hist(mult_result,
                                    bins,
                                    histtype='step',
                                    density=True,
                                    label = 'g',
                                    linewidth=2,
                                    linestyle='-',
                                    alpha=0.5)
                        plt.legend(loc='best', fontsize=14, frameon=True)
                        plt.ylabel('\\textit{Density}', fontsize=20)
                        plt.tight_layout()
                        plt.savefig(os.path.join(self.output_dir, f'hardest z distribution r={r}, N={N}.pdf'))
                        plt.close()  

        # 2 Hardest subjet z distribution
        try:
            for hardest_subjet_z_observable in self.output_numpy['4_hardest_subjets_z'].keys():

                mult_result = self.output_numpy['4_hardest_subjets_z'][hardest_subjet_z_observable]
                mult_observable_shape = mult_result.shape
                bins = np.arange(0.0001, 1, 0.01)
                for r in self.r_list:
                    for N in self.N_cluster_list:
                        if hardest_subjet_z_observable == (f'r{r}_N{N}_q1'):
                            if self.dataset_type == 'Zjet':
                                sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'leading Z jet', color='red')
                            else:
                                sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'leading q jet', color='red')
                        elif hardest_subjet_z_observable == (f'r{r}_N{N}_q2'):
                            if self.dataset_type == 'Zjet':
                                sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'subleading Z jet')
                            else:
                                sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'subleading q jet', color='orange')
                        elif hardest_subjet_z_observable == (f'r{r}_N{N}_g1'):
                            if self.dataset_type == 'Zjet':
                                sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'leading QCD jet', color='orange')
                            else:
                                sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'leading g jet', color='blue')
                        elif hardest_subjet_z_observable == (f'r{r}_N{N}_g2'):
                            if self.dataset_type == 'Zjet':
                                sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'subleading QCD jet', color='black')
                            else:
                                sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'subleading g jet', color='black')
                                
                            if self.subjet_basis == 'inclusive':
                                plt.legend(loc='best', fontsize=18, frameon=True, title = r"$r_{subjet}=$"f"{r}", title_fontsize = 20)
                            else: 
                                plt.legend(loc='best', fontsize=18, frameon=True, title = r"$N_{subjet}=$"f"{N}", title_fontsize = 20)
                            plt.xlim([0,1])
                            plt.ylabel(r"$ \frac{1}{\sigma} \ d\sigma /dz_{1,2}$", fontsize=20)
                            plt.xlabel(r"$z=p_t^{subjet}/p_t^{jet}$", fontsize=20)
                            plt.grid(True)
                            plt.tight_layout()
                            plt.savefig(os.path.join(self.output_dir, f'curve 12 hardest subjets, z distribution r={r}, N={N}.pdf'))
                            plt.close()
        except:
            pass 

        # 13 subjet z distribution
        
        var = False
        if var == True: 
            try:
                for hardest_subjet_z_observable in self.output_numpy['4_hardest_subjets_z'].keys():

                    mult_result = self.output_numpy['4_hardest_subjets_z'][hardest_subjet_z_observable]
                    mult_observable_shape = mult_result.shape
                    bins = np.arange(0.0001, 1, 0.01)
                    for r in self.r_list:
                        for N in self.N_cluster_list:
                            if N > 2:
                                if hardest_subjet_z_observable.endswith(f'r{r}_N{N}_q1'):
                                    if self.dataset_type == 'Zjet':
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'leading Z jet', color='red')
                                    else:
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'leading q jet', color='red')
                                elif hardest_subjet_z_observable.endswith(f'r{r}_N{N}_q3'):
                                    if self.dataset_type == 'Zjet':
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'subleading Z jet')
                                    else:
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'subleading q jet', color='orange')
                                elif hardest_subjet_z_observable.endswith(f'r{r}_N{N}_g1'):
                                    if self.dataset_type == 'Zjet':
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'leading QCD jet', color='orange')
                                    else:
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'leading g jet', color='blue')
                                elif hardest_subjet_z_observable.endswith(f'r{r}_N{N}_g3'):
                                    if self.dataset_type == 'Zjet':
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'subleading QCD jet', color='black')
                                    else:
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'subleading g jet', color='black')
                                    
                                    if self.subjet_basis == 'inclusive':
                                        plt.legend(loc='best', fontsize=18, frameon=True, title = r"$r_{subjet}=$"f"{r}", title_fontsize = 20)
                                    else: 
                                        plt.legend(loc='best', fontsize=18, frameon=True, title = r"$N_{subjet}=$"f"{N}", title_fontsize = 20)
                                    plt.xlim([0,1])
                                    plt.ylabel(r"$ \frac{1}{\sigma} \ d\sigma /dz_{1,3}$", fontsize=24)
                                    plt.xlabel(r"$z=p_t^{subjet}/p_t^{jet}$", fontsize=20)
                                    plt.grid(True)
                                    plt.tight_layout()
                                    plt.savefig(os.path.join(self.output_dir, f'curve 13 hardest subjets, z distribution r={r}, N={N}.pdf'))
                                    plt.close()
            except:
                pass

        # 23 subjet z distribution
        
        if var == True: 
            try:
                for hardest_subjet_z_observable in self.output_numpy['4_hardest_subjets_z'].keys():

                    mult_result = self.output_numpy['4_hardest_subjets_z'][hardest_subjet_z_observable]
                    mult_observable_shape = mult_result.shape
                    bins = np.arange(0.0001, 1, 0.01)
                    for r in self.r_list:
                        for N in self.N_cluster_list:
                            if N > 2:
                                if hardest_subjet_z_observable.endswith(f'r{r}_N{N}_q2'):
                                    if self.dataset_type == 'Zjet':
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'leading Z jet', color='red')
                                    else:
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'leading q jet', color='red')
                                elif hardest_subjet_z_observable.endswith(f'r{r}_N{N}_q3'):
                                    if self.dataset_type == 'Zjet':
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'subleading Z jet')
                                    else:
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'subleading q jet', color='orange')
                                elif hardest_subjet_z_observable.endswith(f'r{r}_N{N}_g2'):
                                    if self.dataset_type == 'Zjet':
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'leading QCD jet', color='orange')
                                    else:
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'leading g jet', color='blue')
                                elif hardest_subjet_z_observable.endswith(f'r{r}_N{N}_g3'):
                                    if self.dataset_type == 'Zjet':
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'subleading QCD jet', color='black')
                                    else:
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'subleading g jet', color='black')
                                    
                                    if self.subjet_basis == 'inclusive':
                                        plt.legend(loc='best', fontsize=18, frameon=True, title = r"$r_{subjet}=$"f"{r}", title_fontsize = 20)
                                    else: 
                                        plt.legend(loc='best', fontsize=18, frameon=True, title = r"$N_{subjet}=$"f"{N}", title_fontsize = 20)
                                    plt.xlim([0,1]) 
                                    plt.ylabel(r"$ \frac{1}{\sigma} \ d\sigma /dz_{2,3}$", fontsize=24)
                                    plt.xlabel(r"$z=p_t^{subjet}/p_t^{jet}$", fontsize=20)
                                    plt.grid(True)
                                    plt.tight_layout()
                                    plt.savefig(os.path.join(self.output_dir, f'curve 23 hardest subjets, z distribution r={r}, N={N}.pdf'))
                                    plt.close()
            except:
                pass

        # 14 subjet z distribution
        
        if var == True: 
            try:
                for hardest_subjet_z_observable in self.output_numpy['4_hardest_subjets_z'].keys():

                    mult_result = self.output_numpy['4_hardest_subjets_z'][hardest_subjet_z_observable]
                    mult_observable_shape = mult_result.shape
                    bins = np.arange(0.0001, 1, 0.01)
                    for r in self.r_list:
                        for N in self.N_cluster_list:
                            if N > 3:
                                if hardest_subjet_z_observable.endswith(f'r{r}_N{N}_q1'):
                                    if self.dataset_type == 'Zjet':
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'leading Z jet', color='red')
                                    else:
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'leading q jet', color='red')
                                elif hardest_subjet_z_observable.endswith(f'r{r}_N{N}_q4'):
                                    if self.dataset_type == 'Zjet':
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'subleading Z jet')
                                    else:
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'subleading q jet', color='orange')
                                elif hardest_subjet_z_observable.endswith(f'r{r}_N{N}_g1'):
                                    if self.dataset_type == 'Zjet':
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'leading QCD jet', color='orange')
                                    else:
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'leading g jet', color='blue')
                                elif hardest_subjet_z_observable.endswith(f'r{r}_N{N}_g4'):
                                    if self.dataset_type == 'Zjet':
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'subleading QCD jet', color='black')
                                    else:
                                        sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1}, label = 'subleading g jet', color='black')
                                    
                                    if self.subjet_basis == 'inclusive':
                                        plt.legend(loc='best', fontsize=18, frameon=True, title = r"$r_{subjet}=$"f"{r}", title_fontsize = 20)
                                    else: 
                                        plt.legend(loc='best', fontsize=18, frameon=True, title = r"$N_{subjet}=$"f"{N}", title_fontsize = 20)
                                    plt.xlim([0,1])
                                    plt.ylabel(r"$ \frac{1}{\sigma} \ d\sigma /dz_{1,4}$", fontsize=24)
                                    plt.xlabel(r"$z=p_t^{subjet}/p_t^{jet}$", fontsize=20)
                                    plt.grid(True)
                                    plt.tight_layout()
                                    plt.savefig(os.path.join(self.output_dir, f'curve 14 hardest subjets, z distribution r={r}, N={N}.pdf'))
                                    plt.close()
            except:
                pass

        try:    
            for hardest_subjet_z_observable in self.output_numpy['4_hardest_subjets_z'].keys():

                mult_result = self.output_numpy['4_hardest_subjets_z'][hardest_subjet_z_observable]
                mult_observable_shape = mult_result.shape

                for r in self.r_list:
                    for N in self.N_cluster_list:
                        if N > 3:
                            if hardest_subjet_z_observable.endswith(f'r{r}_N{N}_q1'):
                                max = np.amax(mult_result)*1.25
                                bins = np.arange(0., 1, 0.01)
                                if self.dataset_type == 'Zjet':
                                    plt.hist(mult_result,
                                            bins,
                                            histtype='step',
                                            density=True,
                                            label = 'Z1',
                                            linewidth=2,
                                            linestyle='-',
                                            alpha=0.5)
                                else:
                                    plt.hist(mult_result,
                                            bins,
                                            histtype='step',
                                            density=True,
                                            label = 'q1',
                                            linewidth=2,
                                            linestyle='-',
                                            alpha=0.5)
                            elif hardest_subjet_z_observable.endswith(f'r{r}_N{N}_q2'):
                                if self.dataset_type == 'Zjet':
                                    plt.hist(mult_result,
                                            bins,
                                            histtype='step',
                                            density=True,
                                            label = 'Z2',
                                            linewidth=2,
                                            linestyle='-',
                                            alpha=0.5)
                                else:
                                    plt.hist(mult_result,
                                            bins,
                                            histtype='step',
                                            density=True,
                                            label = 'q2',
                                            linewidth=2,
                                            linestyle='-',
                                            alpha=0.5)
                            elif hardest_subjet_z_observable.endswith(f'r{r}_N{N}_g1'):
                                if self.dataset_type == 'Zjet':
                                    plt.hist(mult_result,
                                            bins,
                                            histtype='step',
                                            density=True,
                                            label = 'QCD1',
                                            linewidth=2,
                                            linestyle='-',
                                            alpha=0.5)
                                else:
                                    plt.hist(mult_result,
                                            bins,
                                            histtype='step',
                                            density=True,
                                            label = 'g1',
                                            linewidth=2,
                                            linestyle='-',
                                            alpha=0.5)
                            elif hardest_subjet_z_observable.endswith(f'r{r}_N{N}_g2'):
                                if self.dataset_type == 'Zjet':
                                    plt.hist(mult_result,
                                            bins,
                                            histtype='step',
                                            density=True,
                                            label = 'QCD2',
                                            linewidth=2,
                                            linestyle='-',
                                            alpha=0.5)
                                else:
                                    plt.hist(mult_result,
                                            bins,
                                            histtype='step',
                                            density=True,
                                            label = 'g2',
                                            linewidth=2,
                                            linestyle='-',
                                            alpha=0.5)
                                if self.subjet_basis == 'inclusive':
                                    plt.legend(loc='best', fontsize=16, frameon=True, title = r"$r_{subjet}=$" f"{r}", title_fontsize = 18)
                                else:
                                    plt.legend(loc='best', fontsize=16, frameon=True, title = r"$N_{subjet}=$" f"{N}", title_fontsize = 18)
                                plt.ylabel('\\textit{Density}', fontsize=20)
                                plt.grid(True)
                                plt.tight_layout()
                                plt.savefig(os.path.join(self.output_dir, f'2 hardest subjets, z distribution r={r}, N={N}.pdf'))
                                plt.close()
        except:
            pass

        # WTA subjet z distribution
        if self.wta_axis == 'True':
            for wta_subjet_z_observable in self.output_numpy['wta_subjet_z'].keys():

                mult_result = self.output_numpy['wta_subjet_z'][wta_subjet_z_observable]
                mult_observable_shape = mult_result.shape

                for r in self.r_list:
                    for N in self.N_cluster_list:
                        if wta_subjet_z_observable.endswith(f'r{r}_N{N}_q'):
                            # Plot distributions
                            if self.subjet_basis == 'exclusive':
                                plt.xlabel(f'Pythia, WTA subjet z distr., {self.subjet_basis} clust., {self.Clustering_Alg}, N={N}', fontsize=10)
                            if self.subjet_basis == 'inclusive':
                                plt.xlabel(f'Pythia, WTA subjet z distr., {self.subjet_basis} clust., {self.Clustering_Alg}, r={r}', fontsize=10)
                            max = np.amax(mult_result)*1.25
                            bins = np.arange(0., 1, 0.04)
                            if self.dataset_type == 'Zjet':
                                plt.hist(mult_result,
                                        bins,
                                        histtype='step',
                                        density=True,
                                        label = 'Z',
                                        linewidth=2,
                                        linestyle='-',
                                        alpha=0.5)
                            else:
                                plt.hist(mult_result,
                                        bins,
                                        histtype='step',
                                        density=True,
                                        label = 'q',
                                        linewidth=2,
                                        linestyle='-',
                                        alpha=0.5)
                        elif wta_subjet_z_observable.endswith(f'r{r}_N{N}_g'):
                            if self.dataset_type == 'Zjet':
                                plt.hist(mult_result,
                                        bins,
                                        histtype='step',
                                        density=True,
                                        label = 'QCD',
                                        linewidth=2,
                                        linestyle='-',
                                        alpha=0.5)
                            else:
                                plt.hist(mult_result,
                                        bins,
                                        histtype='step',
                                        density=True,
                                        label = 'g',
                                        linewidth=2,
                                        linestyle='-',
                                        alpha=0.5)
                            plt.legend(loc='best', fontsize=14, frameon=True)
                            plt.tight_layout()
                            plt.savefig(os.path.join(self.output_dir, f'WTA subjet z distribution r={r}, N={N}.pdf'))
                            plt.close()





        # Subjet z distribution

        for subjet_z_observable in self.output_numpy['subjet_z'].keys():

            mult_result = self.output_numpy['subjet_z'][subjet_z_observable]
            mult_observable_shape = mult_result.shape

            for r in self.r_list:
                for N in self.N_cluster_list:
                    if subjet_z_observable.endswith(f'r{r}_N{N}_q'):
                        bins = np.arange(0., 1, 0.04)
                        if self.dataset_type == 'Zjet':
                            sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1.5}, label = 'Z')
                        else:
                            sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1.5}, label = 'q')
                    elif subjet_z_observable.endswith(f'r{r}_N{N}_g'):
                        if self.dataset_type == 'Zjet':
                            sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1.5}, label = 'QCD')
                        else:
                            sns.distplot(mult_result, hist = False, bins=bins, kde = True, kde_kws = {'linewidth': 1.5}, label = 'g')
                        if self.subjet_basis == 'inclusive':
                            plt.legend(loc='best', fontsize=22, frameon=True, shadow = True, edgecolor="black", title = r"$r=$"f"{r}", title_fontsize = 22)
                        else:
                            plt.legend(loc='best', fontsize=22, frameon=True, shadow = True, edgecolor="black", title = r"$N=$"f"{N}", title_fontsize = 22)
                        
                        plt.yticks(fontsize=17)
                        plt.xticks(fontsize=17)
                        plt.ylabel(r"$\frac{1}{\sigma} \ d\sigma / dz$", fontsize=28)
                        plt.xlabel(r"$z$",fontsize=28)
                        plt.yscale('log')
                        plt.xlim([0,1])
                        if self.dataset_type =='qg':
                            plt.ylim([0.001,100])
                        plt.grid(True)
                        plt.tight_layout()
                        plt.savefig(os.path.join(self.output_dir, f'curve z distribution of subjets r={r}, N={N}.pdf'))
                        plt.close()


        for subjet_z_observable in self.output_numpy['subjet_z'].keys():

            mult_result = self.output_numpy['subjet_z'][subjet_z_observable]
            mult_observable_shape = mult_result.shape
            #print(f'here')
            #print(subjet_z_observable)
            #time.sleep(4)
            bin_size = 0.02
            # t2_over_t1_q = np.array(t2_q)/np.array(t1_q)
            # t2_over_t1_g = np.array(t2_g)/np.array(t1_g)
            # weights_q= np.ones_like(t2_over_t1_q)/float(len(t2_over_t1_q))/bin_size
            # weights_g= np.ones_like(t2_over_t1_g)/float(len(t2_over_t1_g))/bin_size 
            for r in self.r_list:
                for N in self.N_cluster_list:
                    if subjet_z_observable.endswith(f'r{r}_N{N}_q'):
                        weights_q= np.ones_like(mult_result)/float(len(mult_result))/bin_size * 26.7 # To normalize the curve s.t. it integrates to <n_q>=33.6 for pt=500

                        # Plot distributions
                        if self.subjet_basis == 'exclusive':
                            plt.xlabel(f'z distribution', fontsize=16 )
                        if self.subjet_basis == 'inclusive':
                            plt.xlabel(f'z distribution', fontsize=16)
                        #max = np.amax(mult_result)*1.25
                        bins = np.arange(0., 1, bin_size)
                        if self.dataset_type == 'Zjet':
                            plt.hist(mult_result,
                                    bins, 
                                    histtype='step',
                                    density=True,
                                    label = 'Z',
                                    linewidth=2,
                                    linestyle='-',
                                    alpha=0.5)
                        else:
                            plt.hist(mult_result,
                                    bins, weights= weights_q,
                                    histtype='step',
                                    density=True,
                                    label = 'q',
                                    linewidth=2,
                                    linestyle='-',
                                    alpha=0.5)
                    elif subjet_z_observable.endswith(f'r{r}_N{N}_g'):
                        weights_g= np.ones_like(mult_result)/float(len(mult_result))/bin_size * 29.8 # To normalize the curve s.t. it integrates to <n_g>=56 for pt=500

                        if self.dataset_type == 'Zjet':
                            plt.hist(mult_result,
                                    bins,
                                    histtype='step',
                                    label = 'QCD',
                                    linewidth=2,
                                    linestyle='-',
                                    alpha=0.5)
                        else:
                            plt.hist(mult_result,
                                    bins, weights= weights_g,
                                    histtype='step',
                                    label = 'g',
                                    linewidth=2,
                                    linestyle='-',
                                    alpha=0.5)
                        if self.subjet_basis == 'inclusive':
                            plt.legend(loc='best', fontsize=22, frameon=True, shadow = True, edgecolor="black", title = r"$r=$"f"{r}", title_fontsize = 22)
                        else:
                            plt.legend(loc='best', fontsize=22, frameon=True, shadow = True, edgecolor="black", title = r"$N=$"f"{N}", title_fontsize = 22)

                        plt.yticks(fontsize=19)
                        plt.xticks(fontsize=19)
                        plt.ylabel(r"$\frac{1}{\sigma} \ d\sigma / dz$", fontsize=28)
                        plt.xlabel(r"$z$",fontsize=28)
                        plt.yscale('log')
                        plt.xlim([0,1])
                        plt.ylim([0.005, 2000])
                        plt.tight_layout()
                        plt.savefig(os.path.join(self.output_dir, f'z distribution of subjets r={r}, N={N}.pdf'))
                        plt.close()


        for qa_observable in self.output_numpy['qa'].keys():
            
            qa_result = self.output_numpy['qa'][qa_observable]
            qa_observable_shape = qa_result.shape
            if qa_observable_shape[0] == 0:
                continue

            # Plot distributions
            if qa_observable == 'jet_mass':
                plt.xlabel(rf'{qa_observable}', fontsize=14)
                max = np.amax(qa_result)*1.2
                bins = np.linspace(0, max, 80)
                plt.hist(qa_result,
                        bins,
                        histtype='step',
                        density=True,
                        label = 'q or g',
                        linewidth=2,
                        linestyle='-',
                        alpha=0.5)
                plt.legend(loc='best', fontsize=14, frameon=False)
            
                plt.tight_layout()
                plt.savefig(os.path.join(self.output_dir, f'{qa_observable}.pdf'))
                plt.close()  
            else:
                plt.xlabel(rf'{qa_observable}', fontsize=14)
                max = np.amax(qa_result)*1.2
                bins = np.linspace(0, max, 20)
                plt.hist(qa_result,
                        bins,
                        histtype='step',
                        density=True,
                        label = 'q or g',
                        linewidth=2,
                        linestyle='-',
                        alpha=0.5)
                plt.legend(loc='best', fontsize=14, frameon=False)
                
                plt.tight_layout()
                plt.savefig(os.path.join(self.output_dir, f'{qa_observable}.pdf'))
                plt.close()   
                                    
    #---------------------------------------------------------------
    # Transform particles to fastjet::PseudoJets
    #---------------------------------------------------------------
    def get_fjparticles(self, df_particles_grouped):

        user_index_offset = 0
        return fjext.vectorize_pt_eta_phi_m(df_particles_grouped['pt'].values,
                                          df_particles_grouped['y'].values,
                                          df_particles_grouped['phi'].values,
                                          df_particles_grouped['m'].values)

##################################################################
if __name__ == '__main__':

    # Define arguments
    parser = argparse.ArgumentParser(description='Process qg')
    parser.add_argument('-c', '--configFile', action='store',
                        type=str, metavar='configFile',
                        default='./config/qg.yaml',
                        help='Path of config file for analysis')
    parser.add_argument('-o', '--outputDir', action='store',
                        type=str, metavar='outputDir',
                        default='./TestOutput',
                        help='Output directory for output to be written to')

    # Parse the arguments
    args = parser.parse_args()

    print('Configuring...')
    print('configFile: \'{0}\''.format(args.configFile))
    print('ouputDir: \'{0}\"'.format(args.outputDir))

    # If invalid configFile is given, exit
    if not os.path.exists(args.configFile):
        print('File \"{0}\" does not exist! Exiting!'.format(args.configFile))
        sys.exit(0)

    analysis = ProcessQG(config_file=args.configFile, output_dir=args.outputDir)
    analysis.process_qg()